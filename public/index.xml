<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on A minimal Hugo website</title>
    <link>https://example.org/</link>
    <description>Recent content in Home on A minimal Hugo website</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blog Post V</title>
      <link>https://example.org/post/2024/10/07/blog-post-v/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/10/07/blog-post-v/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;#&#39; @title GOV 1347: Week 5 (Demographics) Laboratory Session&#xA;#&#39; @author Matthew E. Dardet&#xA;#&#39; @date October 2, 2024&#xA;&#xA;####----------------------------------------------------------#&#xA;#### Preamble&#xA;####----------------------------------------------------------#&#xA;&#xA;# Load libraries.&#xA;## install via `install.packages(&amp;quot;name&amp;quot;)`&#xA;library(car)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: carData&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(caret)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: lattice&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(CVXR)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Attaching package: &#39;CVXR&#39;&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Blog Post 4</title>
      <link>https://example.org/post/2024/10/01/blog-post-4/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/10/01/blog-post-4/</guid>
      <description>&lt;h4 id=&#34;this-weeks-question-does-the-incumbency-advantage-apply-to-harris-andor-trump-explain-why-or-why-not&#34;&gt;This Week&amp;rsquo;s Question: Does the incumbency advantage apply to Harris and/or Trump? Explain why or why not.&lt;/h4&gt;&#xA;&lt;p&gt;To begin answering this question I will start with an analysis of pork spending. Pork is federal spending via programs and funding that is provided to people in certain geographic areas and districts. Incumbents generally have an advantage when competing for re-election. Among those advantages is the ability to leverage pork to persuade voters and maintain their base&amp;rsquo;s support.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blog Post 3</title>
      <link>https://example.org/post/2024/09/23/blog-post-3/</link>
      <pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/09/23/blog-post-3/</guid>
      <description>&lt;p&gt;This Week&amp;rsquo;s Objective: Compare and contrast Silver (2024) and Morris (2024). Which approach is better?&lt;/p&gt;&#xA;&lt;p&gt;Nate Silver makes some updates to the 2024 presidential election forecast model. One of the biggest changes to the model from the 2020 presidential election is the removal of COVID-19 effects and its impact on other variables in the model such as the convention bounce–boost in the polls for presidential candidates after the convention. In 2020, the conventions were held virtually and likely drew less excitement for the candidates.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blog Post II</title>
      <link>https://example.org/post/2024/09/16/blog-post-ii/</link>
      <pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/09/16/blog-post-ii/</guid>
      <description>&lt;p&gt;Date: September, 16, 2024&lt;/p&gt;&#xA;&lt;p&gt;This Week&amp;rsquo;s Question: Can we predict election outcomes using only the state of the economy? If so, how well?&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: carData&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;## ✔ dplyr     1.1.3     ✔ readr     2.1.4&#xA;## ✔ forcats   1.0.0     ✔ stringr   1.5.0&#xA;## ✔ ggplot2   3.4.3     ✔ tibble    3.2.1&#xA;## ✔ lubridate 1.9.2     ✔ tidyr     1.3.0&#xA;## ✔ purrr     1.0.2     &#xA;## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;## ✖ dplyr::filter() masks stats::filter()&#xA;## ✖ dplyr::lag()    masks stats::lag()&#xA;## ✖ dplyr::recode() masks car::recode()&#xA;## ✖ purrr::some()   masks car::some()&#xA;## ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>Blog Post 1</title>
      <link>https://example.org/post/2024/09/12/testpost/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/09/12/testpost/</guid>
      <description>&lt;p&gt;Welcome to my election blog! Every week I will be updating my election model and providing analysis to forecast the outcome of the 2024 presidential election as part of an assignment for GOV 1347.&lt;/p&gt;&#xA;&lt;p&gt;The following template is created by Matthew Dardet. In the following weeks I will be building off this election model from our lab section.&lt;/p&gt;&#xA;&lt;p&gt;This week I aim to answer the following questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How competitive are presidential elections in the United States?&lt;/li&gt;&#xA;&lt;li&gt;Which states vote blue/red and how consistently?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code&gt;## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;## ✔ dplyr     1.1.3     ✔ readr     2.1.4&#xA;## ✔ forcats   1.0.0     ✔ stringr   1.5.0&#xA;## ✔ lubridate 1.9.2     ✔ tibble    3.2.1&#xA;## ✔ purrr     1.0.2     ✔ tidyr     1.3.0&#xA;## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;## ✖ dplyr::filter() masks stats::filter()&#xA;## ✖ dplyr::lag()    masks stats::lag()&#xA;## ✖ purrr::map()    masks maps::map()&#xA;## ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title></title>
      <link>https://example.org/post/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/1/01/01/</guid>
      <description>&lt;pre&gt;&lt;code&gt;# Load libraries.&#xA;## install via `install.packages(&amp;quot;name&amp;quot;)`&#xA;library(car)&#xA;&#xA;## Loading required package: carData&#xA;&#xA;library(caret)&#xA;&#xA;## Loading required package: ggplot2&#xA;&#xA;## Loading required package: lattice&#xA;&#xA;library(cowplot)&#xA;library(curl)&#xA;&#xA;## Using libcurl 8.7.1 with LibreSSL/3.3.6&#xA;&#xA;library(CVXR)&#xA;&#xA;## &#xA;## Attaching package: &#39;CVXR&#39;&#xA;&#xA;## The following object is masked from &#39;package:stats&#39;:&#xA;## &#xA;##     power&#xA;&#xA;library(foreign)&#xA;library(geofacet)&#xA;library(glmnet)&#xA;&#xA;## Loading required package: Matrix&#xA;&#xA;## Loaded glmnet 4.1-8&#xA;&#xA;library(haven)&#xA;library(janitor)&#xA;&#xA;## &#xA;## Attaching package: &#39;janitor&#39;&#xA;&#xA;## The following objects are masked from &#39;package:stats&#39;:&#xA;## &#xA;##     chisq.test, fisher.test&#xA;&#xA;library(kableExtra)&#xA;library(maps)&#xA;library(mlr3)&#xA;library(randomForest)&#xA;&#xA;## randomForest 4.7-1.2&#xA;&#xA;## Type rfNews() to see new features/changes/bug fixes.&#xA;&#xA;## &#xA;## Attaching package: &#39;randomForest&#39;&#xA;&#xA;## The following object is masked from &#39;package:ggplot2&#39;:&#xA;## &#xA;##     margin&#xA;&#xA;library(ranger)&#xA;&#xA;## &#xA;## Attaching package: &#39;ranger&#39;&#xA;&#xA;## The following object is masked from &#39;package:randomForest&#39;:&#xA;## &#xA;##     importance&#xA;&#xA;library(RColorBrewer)&#xA;library(rstan)&#xA;&#xA;## Loading required package: StanHeaders&#xA;&#xA;## &#xA;## rstan version 2.32.6 (Stan version 2.32.2)&#xA;&#xA;## For execution on a local, multicore CPU with excess RAM we recommend calling&#xA;## options(mc.cores = parallel::detectCores()).&#xA;## To avoid recompilation of unchanged Stan programs, we recommend calling&#xA;## rstan_options(auto_write = TRUE)&#xA;## For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions,&#xA;## change `threads_per_chain` option:&#xA;## rstan_options(threads_per_chain = 1)&#xA;&#xA;library(scales)&#xA;library(sf)&#xA;&#xA;## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE&#xA;&#xA;library(shinystan)&#xA;&#xA;## Loading required package: shiny&#xA;&#xA;## &#xA;## This is shinystan version 2.6.0&#xA;&#xA;library(tidyverse)&#xA;&#xA;## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;## ✔ dplyr     1.1.4     ✔ readr     2.1.5&#xA;## ✔ forcats   1.0.0     ✔ stringr   1.5.1&#xA;## ✔ lubridate 1.9.3     ✔ tibble    3.2.1&#xA;## ✔ purrr     1.0.2     ✔ tidyr     1.3.1&#xA;&#xA;## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;## ✖ readr::col_factor()    masks scales::col_factor()&#xA;## ✖ dplyr::combine()       masks randomForest::combine()&#xA;## ✖ purrr::discard()       masks scales::discard()&#xA;## ✖ tidyr::expand()        masks Matrix::expand()&#xA;## ✖ tidyr::extract()       masks rstan::extract()&#xA;## ✖ dplyr::filter()        masks stats::filter()&#xA;## ✖ dplyr::group_rows()    masks kableExtra::group_rows()&#xA;## ✖ dplyr::id()            masks CVXR::id()&#xA;## ✖ purrr::is_vector()     masks CVXR::is_vector()&#xA;## ✖ dplyr::lag()           masks stats::lag()&#xA;## ✖ purrr::lift()          masks caret::lift()&#xA;## ✖ purrr::map()           masks maps::map()&#xA;## ✖ randomForest::margin() masks ggplot2::margin()&#xA;## ✖ tidyr::pack()          masks Matrix::pack()&#xA;## ✖ readr::parse_date()    masks curl::parse_date()&#xA;## ✖ dplyr::recode()        masks car::recode()&#xA;## ✖ purrr::some()          masks car::some()&#xA;## ✖ lubridate::stamp()     masks cowplot::stamp()&#xA;## ✖ tidyr::unpack()        masks Matrix::unpack()&#xA;## ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&#xA;library(viridis)&#xA;&#xA;## Loading required package: viridisLite&#xA;## &#xA;## Attaching package: &#39;viridis&#39;&#xA;## &#xA;## The following object is masked from &#39;package:scales&#39;:&#xA;## &#xA;##     viridis_pal&#xA;## &#xA;## The following object is masked from &#39;package:maps&#39;:&#xA;## &#xA;##     unemp&#xA;&#xA;## set working directory here&#xA;# setwd(&amp;quot;~&amp;quot;)&#xA;&#xA;####----------------------------------------------------------#&#xA;#### Read, merge, and process data.&#xA;####----------------------------------------------------------#&#xA;&#xA;# Read popular vote datasets. &#xA;d_popvote &amp;lt;- read_csv(&amp;quot;popvote_1948_2020.csv&amp;quot;)&#xA;&#xA;## Rows: 40 Columns: 11&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (2): party, candidate&#xA;## dbl (5): year, pv, pv2p, deminc, juneapp&#xA;## lgl (4): winner, incumbent, incumbent_party, prev_admin&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;d_state_popvote &amp;lt;- read_csv(&amp;quot;state_popvote_1948_2020.csv&amp;quot;)&#xA;&#xA;## Rows: 959 Columns: 16&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (2): state, winner&#xA;## dbl (14): year, D_pv, R_pv, D_pv2p, R_pv2p, D_pv_lag1, R_pv_lag1, D_pv2p_lag...&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;# Read elector distribution dataset. &#xA;d_ec &amp;lt;- read_csv(&amp;quot;corrected_ec_1948_2024.csv&amp;quot;)&#xA;&#xA;## Rows: 1010 Columns: 4&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (2): state, stateab&#xA;## dbl (2): year, electors&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;# Read ads datasets. &#xA;ad_campaigns &amp;lt;- read_csv(&amp;quot;ad_campaigns_2000-2012.csv&amp;quot;)&#xA;&#xA;## Rows: 166078 Columns: 10&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (4): party, sponsor, state, creative&#xA;## dbl  (5): n_markets, n_stations, total_cost, after_primary, cycle&#xA;## date (1): air_date&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;ad_creative &amp;lt;- read_csv(&amp;quot;ad_creative_2000-2012.csv&amp;quot;)&#xA;&#xA;## Rows: 8857 Columns: 6&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (5): creative, party, ad_issue, ad_purpose, ad_tone&#xA;## dbl (1): cycle&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;ads_2020 &amp;lt;- read_csv(&amp;quot;ads_2020.csv&amp;quot;)&#xA;&#xA;## Rows: 96 Columns: 7&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (1): state&#xA;## dbl  (4): biden_airings, trump_airings, total_airings, total_cost&#xA;## date (2): period_startdate, period_enddate&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;facebook_ads_2020 &amp;lt;- read_csv(&amp;quot;facebook_ads_2020.csv&amp;quot;)&#xA;&#xA;## Rows: 2304323 Columns: 7&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (3): pd_id, page_name, disclaimer&#xA;## dbl  (2): new_spend, num_of_new_ads&#xA;## date (2): from_date, to_date&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;facebook_ads_biden_2020 &amp;lt;- read_csv(&amp;quot;facebook_ads_biden_2020.csv&amp;quot;)&#xA;&#xA;## New names:&#xA;## Rows: 984 Columns: 8&#xA;## ── Column specification&#xA;## ──────────────────────────────────────────────────────── Delimiter: &amp;quot;,&amp;quot; chr&#xA;## (3): pd_id, page_name, disclaimer dbl (3): ...1, new_spend, num_of_new_ads date&#xA;## (2): from_date, to_date&#xA;## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ&#xA;## Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;## • `` -&amp;gt; `...1`&#xA;&#xA;campaign_spending &amp;lt;- read_csv(&amp;quot;FEC_contributions_by_state_2008_2024.csv&amp;quot;)&#xA;&#xA;## New names:&#xA;## Rows: 510 Columns: 6&#xA;## ── Column specification&#xA;## ──────────────────────────────────────────────────────── Delimiter: &amp;quot;,&amp;quot; chr&#xA;## (3): candidate_id, contribution_state, party dbl (3): ...1,&#xA;## contribution_receipt_amount, election_year&#xA;## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ&#xA;## Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;## • `` -&amp;gt; `...1`&#xA;&#xA;# Read polling data. &#xA;d_polls &amp;lt;- read_csv(&amp;quot;national_polls_1968-2024.csv&amp;quot;)&#xA;&#xA;## Rows: 7420 Columns: 9&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (3): state, party, candidate&#xA;## dbl  (4): year, weeks_left, days_left, poll_support&#xA;## lgl  (1): before_convention&#xA;## date (1): poll_date&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;d_state_polls &amp;lt;- read_csv(&amp;quot;state_polls_1968-2024.csv&amp;quot;)&#xA;&#xA;## Rows: 205342 Columns: 9&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (3): state, party, candidate&#xA;## dbl  (4): year, weeks_left, days_left, poll_support&#xA;## lgl  (1): before_convention&#xA;## date (1): poll_date&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;# Read turnout data. &#xA;d_turnout &amp;lt;- read_csv(&amp;quot;state_turnout_1980_2022.csv&amp;quot;)&#xA;&#xA;## Rows: 1144 Columns: 15&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (5): state, vep_turnout, vep_highest_office, vap_highest_office, noncitizen&#xA;## dbl (1): year&#xA;## num (9): total_ballots, highest_office_ballots, vep, vap, prison, probation,...&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&#xA;####--------------------------------------------------------------#&#xA;#### Descriptive statistics on ads and campaign spending over time. &#xA;####--------------------------------------------------------------#&#xA;&#xA;# Tone and Political Ads. &#xA;ad_campaigns |&amp;gt;&#xA;  left_join(ad_creative) |&amp;gt;&#xA;  group_by(cycle, party) |&amp;gt; mutate(tot_n=n()) |&amp;gt; ungroup() |&amp;gt;&#xA;  group_by(cycle, party, ad_tone) |&amp;gt; summarise(pct=n()*100/first(tot_n)) |&amp;gt;&#xA;  filter(!is.na(ad_tone)) |&amp;gt;&#xA;  ggplot(aes(x = cycle, y = pct, fill = ad_tone, group = party)) +&#xA;  geom_bar(stat = &amp;quot;identity&amp;quot;) +&#xA;  scale_x_continuous(breaks = seq(2000, 2012, 4)) +&#xA;  ggtitle(&amp;quot;Campaign Ads Aired By Tone&amp;quot;) +&#xA;  scale_fill_manual(values = c(&amp;quot;red&amp;quot;,&amp;quot;orange&amp;quot;,&amp;quot;gray&amp;quot;,&amp;quot;darkgreen&amp;quot;,&amp;quot;white&amp;quot;), name = &amp;quot;tone&amp;quot;) +&#xA;  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;%&amp;quot;) +&#xA;  facet_wrap(~ party) + theme_minimal() +&#xA;  theme(axis.title = element_text(size=20),&#xA;        axis.text = element_text(size=15),&#xA;        strip.text.x = element_text(size = 20))&#xA;&#xA;## Joining with `by = join_by(party, creative, cycle)`&#xA;&#xA;## Warning in left_join(ad_campaigns, ad_creative): Detected an unexpected many-to-many relationship between `x` and `y`.&#xA;## ℹ Row 1 of `x` matches multiple rows in `y`.&#xA;## ℹ Row 102 of `y` matches multiple rows in `x`.&#xA;## ℹ If a many-to-many relationship is expected, set `relationship =&#xA;##   &amp;quot;many-to-many&amp;quot;` to silence this warning.&#xA;&#xA;## `summarise()` has grouped output by &#39;cycle&#39;, &#39;party&#39;. You can override using&#xA;## the `.groups` argument.&#xA;&lt;/code&gt;&lt;/pr</description>
    </item>
    <item>
      <title>About Hugo XMin</title>
      <link>https://example.org/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/about/</guid>
      <description>&lt;p&gt;&lt;strong&gt;XMin&lt;/strong&gt; is the first Hugo theme I have designed. The original reason that I wrote it was I needed a minimal example of Hugo themes when I was writing the  &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt; book. Basically I wanted a simple theme that supports a navigation menu, a home page, other single pages, lists of pages, blog posts, categories, tags, and RSS. That is all. Nothing fancy. In terms of CSS and JavaScript, I really want to keep them minimal. In fact, this theme does not contain any JavaScript code at all, although on this example website I did introduce some JavaScript code (still relatively simple anyway). The theme does not contain any images, either, and is pretty much a plain-text theme.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
