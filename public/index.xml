<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on A minimal Hugo website</title>
    <link>https://example.org/</link>
    <description>Recent content in Home on A minimal Hugo website</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 28 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://example.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Blog Post 8</title>
      <link>https://example.org/post/2024/10/28/blog-post-8/</link>
      <pubDate>Mon, 28 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/10/28/blog-post-8/</guid>
      <description></description>
    </item>
    <item>
      <title>Blog Post 7</title>
      <link>https://example.org/post/2024/10/21/blog-post-7/</link>
      <pubDate>Mon, 21 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/10/21/blog-post-7/</guid>
      <description></description>
    </item>
    <item>
      <title>Blog Post 6</title>
      <link>https://example.org/post/2024/10/14/blog-post-6/</link>
      <pubDate>Mon, 14 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/10/14/blog-post-6/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Load libraries.&#xA;## install via `install.packages(&amp;quot;name&amp;quot;)`&#xA;library(car)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: carData&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(caret)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: lattice&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(cowplot)&#xA;library(curl)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Using libcurl 8.7.1 with LibreSSL/3.3.6&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(CVXR)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Attaching package: &#39;CVXR&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:stats&#39;:&#xA;## &#xA;##     power&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(foreign)&#xA;library(geofacet)&#xA;library(glmnet)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: Matrix&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loaded glmnet 4.1-8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(haven)&#xA;library(janitor)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Attaching package: &#39;janitor&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## The following objects are masked from &#39;package:stats&#39;:&#xA;## &#xA;##     chisq.test, fisher.test&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(kableExtra)&#xA;library(maps)&#xA;library(mlr3)&#xA;library(randomForest)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## randomForest 4.7-1.2&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Type rfNews() to see new features/changes/bug fixes.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Attaching package: &#39;randomForest&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:ggplot2&#39;:&#xA;## &#xA;##     margin&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(ranger)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Attaching package: &#39;ranger&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## The following object is masked from &#39;package:randomForest&#39;:&#xA;## &#xA;##     importance&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(RColorBrewer)&#xA;library(rstan)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: StanHeaders&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## rstan version 2.32.6 (Stan version 2.32.2)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## For execution on a local, multicore CPU with excess RAM we recommend calling&#xA;## options(mc.cores = parallel::detectCores()).&#xA;## To avoid recompilation of unchanged Stan programs, we recommend calling&#xA;## rstan_options(auto_write = TRUE)&#xA;## For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions,&#xA;## change `threads_per_chain` option:&#xA;## rstan_options(threads_per_chain = 1)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(scales)&#xA;library(sf)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(shinystan)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: shiny&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## This is shinystan version 2.6.0&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tidyverse)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;## ✔ dplyr     1.1.4     ✔ readr     2.1.5&#xA;## ✔ forcats   1.0.0     ✔ stringr   1.5.1&#xA;## ✔ lubridate 1.9.3     ✔ tibble    3.2.1&#xA;## ✔ purrr     1.0.2     ✔ tidyr     1.3.1&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;## ✖ readr::col_factor()    masks scales::col_factor()&#xA;## ✖ dplyr::combine()       masks randomForest::combine()&#xA;## ✖ purrr::discard()       masks scales::discard()&#xA;## ✖ tidyr::expand()        masks Matrix::expand()&#xA;## ✖ tidyr::extract()       masks rstan::extract()&#xA;## ✖ dplyr::filter()        masks stats::filter()&#xA;## ✖ dplyr::group_rows()    masks kableExtra::group_rows()&#xA;## ✖ dplyr::id()            masks CVXR::id()&#xA;## ✖ purrr::is_vector()     masks CVXR::is_vector()&#xA;## ✖ dplyr::lag()           masks stats::lag()&#xA;## ✖ purrr::lift()          masks caret::lift()&#xA;## ✖ purrr::map()           masks maps::map()&#xA;## ✖ randomForest::margin() masks ggplot2::margin()&#xA;## ✖ tidyr::pack()          masks Matrix::pack()&#xA;## ✖ readr::parse_date()    masks curl::parse_date()&#xA;## ✖ dplyr::recode()        masks car::recode()&#xA;## ✖ purrr::some()          masks car::some()&#xA;## ✖ lubridate::stamp()     masks cowplot::stamp()&#xA;## ✖ tidyr::unpack()        masks Matrix::unpack()&#xA;## ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(viridis)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: viridisLite&#xA;## &#xA;## Attaching package: &#39;viridis&#39;&#xA;## &#xA;## The following object is masked from &#39;package:scales&#39;:&#xA;## &#xA;##     viridis_pal&#xA;## &#xA;## The following object is masked from &#39;package:maps&#39;:&#xA;## &#xA;##     unemp&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## set working directory here&#xA;# setwd(&amp;quot;~&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;####----------------------------------------------------------#&#xA;#### Read, merge, and process data.&#xA;####----------------------------------------------------------#&#xA;&#xA;# Read popular vote datasets. &#xA;d_popvote &amp;lt;- read_csv(&amp;quot;popvote_1948_2020.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 40 Columns: 11&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (2): party, candidate&#xA;## dbl (5): year, pv, pv2p, deminc, juneapp&#xA;## lgl (4): winner, incumbent, incumbent_party, prev_admin&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d_state_popvote &amp;lt;- read_csv(&amp;quot;state_popvote_1948_2020.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 959 Columns: 16&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (2): state, winner&#xA;## dbl (14): year, D_pv, R_pv, D_pv2p, R_pv2p, D_pv_lag1, R_pv_lag1, D_pv2p_lag...&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Read elector distribution dataset. &#xA;d_ec &amp;lt;- read_csv(&amp;quot;corrected_ec_1948_2024.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 1010 Columns: 4&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (2): state, stateab&#xA;## dbl (2): year, electors&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Read ads datasets. &#xA;ad_campaigns &amp;lt;- read_csv(&amp;quot;ad_campaigns_2000-2012.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 166078 Columns: 10&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (4): party, sponsor, state, creative&#xA;## dbl  (5): n_markets, n_stations, total_cost, after_primary, cycle&#xA;## date (1): air_date&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ad_creative &amp;lt;- read_csv(&amp;quot;ad_creative_2000-2012.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 8857 Columns: 6&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (5): creative, party, ad_issue, ad_purpose, ad_tone&#xA;## dbl (1): cycle&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ads_2020 &amp;lt;- read_csv(&amp;quot;ads_2020.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 96 Columns: 7&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (1): state&#xA;## dbl  (4): biden_airings, trump_airings, total_airings, total_cost&#xA;## date (2): period_startdate, period_enddate&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;facebook_ads_2020 &amp;lt;- read_csv(&amp;quot;facebook_ads_2020.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 2304323 Columns: 7&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (3): pd_id, page_name, disclaimer&#xA;## dbl  (2): new_spend, num_of_new_ads&#xA;## date (2): from_date, to_date&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;facebook_ads_biden_2020 &amp;lt;- read_csv(&amp;quot;facebook_ads_biden_2020.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## New names:&#xA;## Rows: 984 Columns: 8&#xA;## ── Column specification&#xA;## ──────────────────────────────────────────────────────── Delimiter: &amp;quot;,&amp;quot; chr&#xA;## (3): pd_id, page_name, disclaimer dbl (3): ...1, new_spend, num_of_new_ads date&#xA;## (2): from_date, to_date&#xA;## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ&#xA;## Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;## • `` -&amp;gt; `...1`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;campaign_spending &amp;lt;- read_csv(&amp;quot;FEC_contributions_by_state_2008_2024.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## New names:&#xA;## Rows: 510 Columns: 6&#xA;## ── Column specification&#xA;## ──────────────────────────────────────────────────────── Delimiter: &amp;quot;,&amp;quot; chr&#xA;## (3): candidate_id, contribution_state, party dbl (3): ...1,&#xA;## contribution_receipt_amount, election_year&#xA;## ℹ Use `spec()` to retrieve the full column specification for this data. ℹ&#xA;## Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;## • `` -&amp;gt; `...1`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Read polling data. &#xA;d_polls &amp;lt;- read_csv(&amp;quot;national_polls_1968-2024.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 7420 Columns: 9&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (3): state, party, candidate&#xA;## dbl  (4): year, weeks_left, days_left, poll_support&#xA;## lgl  (1): before_convention&#xA;## date (1): poll_date&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d_state_polls &amp;lt;- read_csv(&amp;quot;state_polls_1968-2024.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 205342 Columns: 9&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr  (3): state, party, candidate&#xA;## dbl  (4): year, weeks_left, days_left, poll_support&#xA;## lgl  (1): before_convention&#xA;## date (1): poll_date&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Read turnout data. &#xA;d_turnout &amp;lt;- read_csv(&amp;quot;state_turnout_1980_2022.csv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 1144 Columns: 15&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (5): state, vep_turnout, vep_highest_office, vap_highest_office, noncitizen&#xA;## dbl (1): year&#xA;## num (9): total_ballots, highest_office_ballots, vep, vap, prison, probation,...&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;####--------------------------------------------------------------#&#xA;#### Descriptive statistics on ads and campaign spending over time. &#xA;####--------------------------------------------------------------#&#xA;&#xA;# Tone and Political Ads. &#xA;ad_campaigns |&amp;gt;&#xA;  left_join(ad_creative) |&amp;gt;&#xA;  group_by(cycle, party) |&amp;gt; mutate(tot_n=n()) |&amp;gt; ungroup() |&amp;gt;&#xA;  group_by(cycle, party, ad_tone) |&amp;gt; summarise(pct=n()*100/first(tot_n)) |&amp;gt;&#xA;  filter(!is.na(ad_tone)) |&amp;gt;&#xA;  ggplot(aes(x = cycle, y = pct, fill = ad_tone, group = party)) +&#xA;  geom_bar(stat = &amp;quot;identity&amp;quot;) +&#xA;  scale_x_continuous(breaks = seq(2000, 2012, 4)) +&#xA;  ggtitle(&amp;quot;Campaign Ads Aired By Tone&amp;quot;) +&#xA;  scale_fill_manual(values = c(&amp;quot;red&amp;quot;,&amp;quot;orange&amp;quot;,&amp;quot;gray&amp;quot;,&amp;quot;darkgreen&amp;quot;,&amp;quot;white&amp;quot;), name = &amp;quot;tone&amp;quot;) +&#xA;  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;%&amp;quot;) +&#xA;  facet_wrap(~ party) + theme_minimal() +&#xA;  theme(axis.title = element_text(size=20),&#xA;        axis.text = element_text(size=15),&#xA;        strip.text.x = element_text(size = 20))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Joining with `by = join_by(party, creative, cycle)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Warning in left_join(ad_campaigns, ad_creative): Detected an unexpected many-to-many relationship between `x` and `y`.&#xA;## ℹ Row 1 of `x` matches multiple rows in `y`.&#xA;## ℹ Row 102 of `y` matches multiple rows in `x`.&#xA;## ℹ If a many-to-many relationship is expected, set `relationship =&#xA;##   &amp;quot;many-to-many&amp;quot;` to silence this warning.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;cycle&#39;, &#39;party&#39;. You can override using&#xA;## the `.groups` argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-1.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## The Purpose of Political Ads&#xA;ad_campaigns |&amp;gt;&#xA;  left_join(ad_creative) |&amp;gt;&#xA;  group_by(cycle, party) |&amp;gt; mutate(tot_n=n()) |&amp;gt; ungroup() |&amp;gt;&#xA;  group_by(cycle, party, ad_purpose) |&amp;gt; summarise(pct=n()*100/first(tot_n)) |&amp;gt;&#xA;  filter(!is.na(ad_purpose)) |&amp;gt;&#xA;  bind_rows( ##2016 raw data not public yet! This was entered manually&#xA;    data.frame(cycle = 2016, ad_purpose = &amp;quot;personal&amp;quot;, party = &amp;quot;democrat&amp;quot;, pct = 67),&#xA;    data.frame(cycle = 2016, ad_purpose = &amp;quot;policy&amp;quot;, party = &amp;quot;democrat&amp;quot;, pct = 12),&#xA;    data.frame(cycle = 2016, ad_purpose = &amp;quot;both&amp;quot;, party = &amp;quot;democrat&amp;quot;, pct = 21),&#xA;    data.frame(cycle = 2016, ad_purpose = &amp;quot;personal&amp;quot;, party = &amp;quot;republican&amp;quot;, pct = 11),&#xA;    data.frame(cycle = 2016, ad_purpose = &amp;quot;policy&amp;quot;, party = &amp;quot;republican&amp;quot;, pct = 71),&#xA;    data.frame(cycle = 2016, ad_purpose = &amp;quot;both&amp;quot;, party = &amp;quot;republican&amp;quot;, pct = 18)&#xA;  ) |&amp;gt;&#xA;  ggplot(aes(x = cycle, y = pct, fill = ad_purpose, group = party)) +&#xA;  geom_bar(stat = &amp;quot;identity&amp;quot;) +&#xA;  scale_x_continuous(breaks = seq(2000, 2016, 4)) +&#xA;  # ggtitle(&amp;quot;Campaign Ads Aired By Purpose&amp;quot;) +&#xA;  scale_fill_manual(values = c(&amp;quot;grey&amp;quot;,&amp;quot;red&amp;quot;,&amp;quot;darkgreen&amp;quot;,&amp;quot;black&amp;quot;,&amp;quot;white&amp;quot;), name = &amp;quot;purpose&amp;quot;) +&#xA;  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;%&amp;quot;) +&#xA;  facet_wrap(~ party) + theme_minimal() +&#xA;  theme(axis.title = element_text(size=20),&#xA;        axis.text = element_text(size=15),&#xA;        strip.text.x = element_text(size = 20))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Joining with `by = join_by(party, creative, cycle)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Warning in left_join(ad_campaigns, ad_creative): Detected an unexpected many-to-many relationship between `x` and `y`.&#xA;## ℹ Row 1 of `x` matches multiple rows in `y`.&#xA;## ℹ Row 102 of `y` matches multiple rows in `x`.&#xA;## ℹ If a many-to-many relationship is expected, set `relationship =&#xA;##   &amp;quot;many-to-many&amp;quot;` to silence this warning.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;cycle&#39;, &#39;party&#39;. You can override using&#xA;## the `.groups` argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-2.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## The Elections and Their Issues&#xA;top_issues &amp;lt;- ad_campaigns |&amp;gt; &#xA;  left_join(ad_creative) |&amp;gt;&#xA;  filter(!grepl(&amp;quot;None|Other&amp;quot;, ad_issue)) |&amp;gt;&#xA;  group_by(cycle, ad_issue) |&amp;gt; summarise(n=n()) |&amp;gt; top_n(5, n)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Joining with `by = join_by(party, creative, cycle)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Warning in left_join(ad_campaigns, ad_creative): Detected an unexpected many-to-many relationship between `x` and `y`.&#xA;## ℹ Row 1 of `x` matches multiple rows in `y`.&#xA;## ℹ Row 102 of `y` matches multiple rows in `x`.&#xA;## ℹ If a many-to-many relationship is expected, set `relationship =&#xA;##   &amp;quot;many-to-many&amp;quot;` to silence this warning.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;cycle&#39;. You can override using the&#xA;## `.groups` argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;### making each plot in a grid to have its own x-axis (issue name)&#xA;### is tricky with `facet_wrap`, so we use this package `cowplot`&#xA;### which allows us to take a list of separate plots and grid them together&#xA;plist &amp;lt;- lapply(c(2000,2004,2008,2012), function(c) {&#xA;  top_issues |&amp;gt; filter(cycle == c) |&amp;gt; &#xA;    ggplot(aes(x = reorder(ad_issue, n), y = n)) +&#xA;    geom_bar(stat = &amp;quot;identity&amp;quot;) + coord_flip() + theme_bw() +&#xA;    xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;number ads aired&amp;quot;) + ggtitle(paste(&amp;quot;Top 5 Ad\nIssues in&amp;quot;,c))&#xA;  &#xA;})&#xA;cowplot::plot_grid(plotlist = plist, nrow = 2, ncol = 2, align = &amp;quot;hv&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-3.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Campaign Ads Aired By Issue and Party: 2000&#xA;party_issues2000 &amp;lt;- ad_campaigns |&amp;gt;&#xA;  filter(cycle == 2000) |&amp;gt;&#xA;  left_join(ad_creative) |&amp;gt;&#xA;  filter(ad_issue != &amp;quot;None&amp;quot;) |&amp;gt;&#xA;  ## this `group_by` is to get our denominator&#xA;  group_by(ad_issue) |&amp;gt; mutate(tot_n=n()) |&amp;gt; ungroup() |&amp;gt;&#xA;  ## this one is get numerator and calculate % by party&#xA;  group_by(ad_issue, party) |&amp;gt; summarise(p_n=n()*100/first(tot_n)) |&amp;gt; ungroup() |&amp;gt;&#xA;  ## finally, this one so we can sort the issue names&#xA;  ## by D% of issue ad-share instead of alphabetically&#xA;  group_by(ad_issue) |&amp;gt; mutate(Dp_n = ifelse(first(party) == &amp;quot;democrat&amp;quot;, first(p_n), 0))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Joining with `by = join_by(party, creative, cycle)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Warning in left_join(filter(ad_campaigns, cycle == 2000), ad_creative): Detected an unexpected many-to-many relationship between `x` and `y`.&#xA;## ℹ Row 1 of `x` matches multiple rows in `y`.&#xA;## ℹ Row 102 of `y` matches multiple rows in `x`.&#xA;## ℹ If a many-to-many relationship is expected, set `relationship =&#xA;##   &amp;quot;many-to-many&amp;quot;` to silence this warning.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;ad_issue&#39;. You can override using the&#xA;## `.groups` argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(party_issues2000, aes(x = reorder(ad_issue, Dp_n), y = p_n, fill = party)) + &#xA;  geom_bar(stat = &amp;quot;identity&amp;quot;) +&#xA;  scale_fill_manual(values = c(&amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;)) +&#xA;  ylab(&amp;quot;% of ads on topic from each party&amp;quot;) + xlab(&amp;quot;issue&amp;quot;) + &#xA;  # ggtitle(&amp;quot;Campaign Ads Aired by Topic in 2000&amp;quot;) +&#xA;  coord_flip() + &#xA;  theme_bw()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-4.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Campaign Ads Aired By Issue and Party: 2012&#xA;party_issues2012 &amp;lt;- ad_campaigns |&amp;gt;&#xA;  filter(cycle == 2012) |&amp;gt;&#xA;  left_join(ad_creative) |&amp;gt;&#xA;  filter(ad_issue != &amp;quot;None&amp;quot;) |&amp;gt;&#xA;  group_by(cycle, ad_issue) |&amp;gt; mutate(tot_n=n()) |&amp;gt; ungroup() |&amp;gt;&#xA;  group_by(cycle, ad_issue, party) |&amp;gt; summarise(p_n=n()*100/first(tot_n)) |&amp;gt; ungroup() |&amp;gt;&#xA;  group_by(cycle, ad_issue) |&amp;gt; mutate(Dp_n = ifelse(first(party) == &amp;quot;democrat&amp;quot;, first(p_n), 0))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Joining with `by = join_by(party, creative, cycle)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Warning in left_join(filter(ad_campaigns, cycle == 2012), ad_creative): Detected an unexpected many-to-many relationship between `x` and `y`.&#xA;## ℹ Row 7 of `x` matches multiple rows in `y`.&#xA;## ℹ Row 8259 of `y` matches multiple rows in `x`.&#xA;## ℹ If a many-to-many relationship is expected, set `relationship =&#xA;##   &amp;quot;many-to-many&amp;quot;` to silence this warning.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;cycle&#39;, &#39;ad_issue&#39;. You can override using&#xA;## the `.groups` argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;ggplot(party_issues2012, aes(x = reorder(ad_issue, Dp_n), y = p_n, fill = party)) + &#xA;  geom_bar(stat = &amp;quot;identity&amp;quot;) +&#xA;  scale_fill_manual(values = c(&amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;)) +&#xA;  ylab(&amp;quot;% of ads on topic from each party&amp;quot;) + xlab(&amp;quot;issue&amp;quot;) +&#xA;  # ggtitle(&amp;quot;Campaign Ads Aired by Topic in 2012&amp;quot;) +&#xA;  coord_flip() + &#xA;  theme_bw()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-5.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## When to Buy Ads? &#xA;ad_campaigns |&amp;gt;&#xA;  mutate(year = as.numeric(substr(air_date, 1, 4))) |&amp;gt;&#xA;  mutate(month = as.numeric(substr(air_date, 6, 7))) |&amp;gt;&#xA;  filter(year %in% c(2000, 2004, 2008, 2012), month &amp;gt; 7) |&amp;gt;&#xA;  group_by(cycle, air_date, party) |&amp;gt;&#xA;  summarise(total_cost = sum(total_cost)) |&amp;gt;&#xA;  ggplot(aes(x=air_date, y=total_cost, color=party)) +&#xA;  # scale_x_date(date_labels = &amp;quot;%b, %Y&amp;quot;) +&#xA;  scale_y_continuous(labels = dollar_format()) +&#xA;  scale_color_manual(values = c(&amp;quot;blue&amp;quot;,&amp;quot;red&amp;quot;), name = &amp;quot;&amp;quot;) +&#xA;  geom_line() + geom_point(size=0.5) +&#xA;  facet_wrap(cycle ~ ., scales=&amp;quot;free&amp;quot;) +&#xA;  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;ad spend&amp;quot;) +&#xA;  theme_bw() +&#xA;  theme(axis.title = element_text(size=20),&#xA;        axis.text = element_text(size=11),&#xA;        strip.text.x = element_text(size = 20))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;cycle&#39;, &#39;air_date&#39;. You can override using&#xA;## the `.groups` argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-6.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## Tone in Political Ads&#xA;ad_campaigns |&amp;gt;&#xA;  left_join(ad_creative) |&amp;gt;&#xA;  filter(ad_tone %in% c(&amp;quot;attack&amp;quot;, &amp;quot;promote&amp;quot;)) |&amp;gt;&#xA;  mutate(year = as.numeric(substr(air_date, 1, 4))) |&amp;gt;&#xA;  mutate(month = as.numeric(substr(air_date, 6, 7))) |&amp;gt;&#xA;  filter(year %in% c(2000, 2004, 2008, 2012), month &amp;gt; 7) |&amp;gt;&#xA;  group_by(cycle, air_date, ad_tone) |&amp;gt;&#xA;  summarise(total_cost = sum(n_stations)) |&amp;gt;&#xA;  group_by(cycle, air_date) |&amp;gt;&#xA;  mutate(total_cost = total_cost/sum(total_cost)) |&amp;gt;&#xA;  ungroup() |&amp;gt;&#xA;  ggplot(aes(x=air_date, y=total_cost, fill=ad_tone, color=ad_tone)) +&#xA;  # scale_x_date(date_labels = &amp;quot;%b&amp;quot;) +&#xA;  scale_fill_manual(values = c(&amp;quot;purple&amp;quot;,&amp;quot;green&amp;quot;), name = &amp;quot;ad tone&amp;quot;) +&#xA;  scale_color_manual(values = c(&amp;quot;purple&amp;quot;,&amp;quot;green&amp;quot;), name = &amp;quot;ad tone&amp;quot;) +&#xA;  geom_bar(stat = &amp;quot;identity&amp;quot;) +&#xA;  facet_wrap(cycle ~ ., scales=&amp;quot;free&amp;quot;) +&#xA;  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;% of ads bought on day&amp;quot;) +&#xA;  theme_bw() +&#xA;  theme(axis.title = element_text(size=20),&#xA;        axis.text = element_text(size=10),&#xA;        strip.text.x = element_text(size = 20))&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Joining with `by = join_by(party, creative, cycle)`&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Warning in left_join(ad_campaigns, ad_creative): Detected an unexpected many-to-many relationship between `x` and `y`.&#xA;## ℹ Row 1 of `x` matches multiple rows in `y`.&#xA;## ℹ Row 102 of `y` matches multiple rows in `x`.&#xA;## ℹ If a many-to-many relationship is expected, set `relationship =&#xA;##   &amp;quot;many-to-many&amp;quot;` to silence this warning.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;cycle&#39;, &#39;air_date&#39;. You can override using&#xA;## the `.groups` argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-7.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;## The State-level Air War in 2008 (Obama vs. McCain)&#xA;ad_campaigns |&amp;gt;&#xA;  mutate(year = as.numeric(substr(air_date, 1, 4))) |&amp;gt;&#xA;  mutate(month = as.numeric(substr(air_date, 6, 7))) |&amp;gt;&#xA;  mutate(state = state.name[match(state, state.abb)]) |&amp;gt;&#xA;  filter(cycle == 2008) |&amp;gt;&#xA;  left_join(d_state_popvote |&amp;gt; filter(year == 2008) |&amp;gt; select(-year), by=&amp;quot;state&amp;quot;) |&amp;gt;&#xA;  mutate(winner=ifelse(D_pv2p &amp;gt; R_pv2p, &amp;quot;democrat&amp;quot;, &amp;quot;republican&amp;quot;)) |&amp;gt;&#xA;  group_by(cycle, state, air_date, party, winner) |&amp;gt;&#xA;  summarise(total_cost = sum(total_cost)) |&amp;gt;&#xA;  filter(!is.na(state)) |&amp;gt;&#xA;  # ggplot(aes(x=air_date, y=log(total_cost+1), color=party)) +&#xA;  ggplot(aes(x=party, y=total_cost, fill=party)) +&#xA;  geom_bar(stat=&amp;quot;identity&amp;quot;) +&#xA;  geom_rect(aes(fill=winner), xmin=-Inf, xmax=Inf, ymin=46.3*10^6, ymax=52*10^6) +&#xA;  facet_geo(~ state, scales=&amp;quot;free_x&amp;quot;) +&#xA;  scale_fill_manual(values = c(&amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;)) +&#xA;  scale_y_continuous(labels = unit_format(unit = &amp;quot;M&amp;quot;, scale = 1e-6)) +&#xA;  xlab(&amp;quot;&amp;quot;) + ylab(&amp;quot;ad spend&amp;quot;) +&#xA;  theme_bw() +&#xA;  theme(axis.title.x=element_blank(),&#xA;        axis.text.x=element_blank(),&#xA;        axis.ticks.x=element_blank())&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `summarise()` has grouped output by &#39;cycle&#39;, &#39;state&#39;, &#39;air_date&#39;, &#39;party&#39;. You&#xA;## can override using the `.groups` argument.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-8.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Visualizing Facebook ads and Biden Facebook ads in 2020. &#xA;d_facebook &amp;lt;- facebook_ads_2020 |&amp;gt; &#xA;  rename(date = from_date, new_ads = num_of_new_ads) |&amp;gt; &#xA;  group_by(date) |&amp;gt; &#xA;  summarize(new_spend = sum(new_spend, na.rm = T),&#xA;            new_ads = sum(new_ads, na.rm = T))&#xA;&#xA;d_facebook |&amp;gt; &#xA;  ggplot(aes(x = date, y = new_ads)) + &#xA;  geom_line() +&#xA;  geom_smooth(method = &amp;quot;lm&amp;quot;, se = TRUE) +&#xA;  labs(x = &amp;quot;Date&amp;quot;, &#xA;       y = &amp;quot;New Facebook Ads&amp;quot;) +&#xA;  theme_minimal()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula = &#39;y ~ x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-9.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d_facebook |&amp;gt; &#xA;  ggplot(aes(x = date, y = new_spend)) +&#xA;  geom_line() +&#xA;  scale_y_continuous(labels = dollar_format()) +&#xA;  geom_smooth(method = &amp;quot;lm&amp;quot;, se = TRUE) + &#xA;  labs(x = &amp;quot;Date&amp;quot;, &#xA;       y = &amp;quot;New Facebook Ad Spending&amp;quot;) +&#xA;  theme_minimal()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula = &#39;y ~ x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-10.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d_facebook_biden &amp;lt;- facebook_ads_biden_2020 |&amp;gt; &#xA;  rename(date = from_date, new_ads = num_of_new_ads) |&amp;gt; &#xA;  group_by(date) |&amp;gt; &#xA;  summarize(new_spend = sum(new_spend, na.rm = T),&#xA;            new_ads = sum(new_ads, na.rm = T))&#xA;&#xA;d_facebook_biden |&amp;gt;&#xA;  ggplot(aes(x = date, y = new_ads)) + &#xA;  geom_line() +&#xA;  geom_smooth(method = &amp;quot;lm&amp;quot;, se = TRUE) +&#xA;  labs(x = &amp;quot;Date&amp;quot;, &#xA;       y = &amp;quot;New Facebook Ads (Biden Only)&amp;quot;) +&#xA;  theme_minimal()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula = &#39;y ~ x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-11.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;d_facebook_biden |&amp;gt;&#xA;  ggplot(aes(x = date, y = new_spend)) +&#xA;  geom_line() +&#xA;  scale_y_continuous(labels = dollar_format()) +&#xA;  geom_smooth(method = &amp;quot;lm&amp;quot;, se = TRUE) + &#xA;  labs(x = &amp;quot;Date&amp;quot;, &#xA;       y = &amp;quot;New Facebook Ad Spending (Biden Only)&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## `geom_smooth()` using formula = &#39;y ~ x&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/10/14/blog-post-6/index_files/figure-html/descriptive-statistics-12.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;  theme_minimal()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## List of 136&#xA;##  $ line                            :List of 6&#xA;##   ..$ colour       : chr &amp;quot;black&amp;quot;&#xA;##   ..$ linewidth    : num 0.5&#xA;##   ..$ linetype     : num 1&#xA;##   ..$ lineend      : chr &amp;quot;butt&amp;quot;&#xA;##   ..$ arrow        : logi FALSE&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_line&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ rect                            :List of 5&#xA;##   ..$ fill         : chr &amp;quot;white&amp;quot;&#xA;##   ..$ colour       : chr &amp;quot;black&amp;quot;&#xA;##   ..$ linewidth    : num 0.5&#xA;##   ..$ linetype     : num 1&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_rect&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ text                            :List of 11&#xA;##   ..$ family       : chr &amp;quot;&amp;quot;&#xA;##   ..$ face         : chr &amp;quot;plain&amp;quot;&#xA;##   ..$ colour       : chr &amp;quot;black&amp;quot;&#xA;##   ..$ size         : num 11&#xA;##   ..$ hjust        : num 0.5&#xA;##   ..$ vjust        : num 0.5&#xA;##   ..$ angle        : num 0&#xA;##   ..$ lineheight   : num 0.9&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 0points 0points 0points 0points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : logi FALSE&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ title                           : NULL&#xA;##  $ aspect.ratio                    : NULL&#xA;##  $ axis.title                      : NULL&#xA;##  $ axis.title.x                    :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : NULL&#xA;##   ..$ vjust        : num 1&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 2.75points 0points 0points 0points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.title.x.top                :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : NULL&#xA;##   ..$ vjust        : num 0&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 0points 0points 2.75points 0points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.title.x.bottom             : NULL&#xA;##  $ axis.title.y                    :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : NULL&#xA;##   ..$ vjust        : num 1&#xA;##   ..$ angle        : num 90&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 0points 2.75points 0points 0points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.title.y.left               : NULL&#xA;##  $ axis.title.y.right              :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : NULL&#xA;##   ..$ vjust        : num 1&#xA;##   ..$ angle        : num -90&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 0points 0points 0points 2.75points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.text                       :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : chr &amp;quot;grey30&amp;quot;&#xA;##   ..$ size         : &#39;rel&#39; num 0.8&#xA;##   ..$ hjust        : NULL&#xA;##   ..$ vjust        : NULL&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : NULL&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.text.x                     :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : NULL&#xA;##   ..$ vjust        : num 1&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 2.2points 0points 0points 0points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.text.x.top                 :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : NULL&#xA;##   ..$ vjust        : num 0&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 0points 0points 2.2points 0points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.text.x.bottom              : NULL&#xA;##  $ axis.text.y                     :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : num 1&#xA;##   ..$ vjust        : NULL&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 0points 2.2points 0points 0points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.text.y.left                : NULL&#xA;##  $ axis.text.y.right               :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : num 0&#xA;##   ..$ vjust        : NULL&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 0points 0points 0points 2.2points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.text.theta                 : NULL&#xA;##  $ axis.text.r                     :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : num 0.5&#xA;##   ..$ vjust        : NULL&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : &#39;margin&#39; num [1:4] 0points 2.2points 0points 2.2points&#xA;##   .. ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.ticks                      : list()&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_blank&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.ticks.x                    : NULL&#xA;##  $ axis.ticks.x.top                : NULL&#xA;##  $ axis.ticks.x.bottom             : NULL&#xA;##  $ axis.ticks.y                    : NULL&#xA;##  $ axis.ticks.y.left               : NULL&#xA;##  $ axis.ticks.y.right              : NULL&#xA;##  $ axis.ticks.theta                : NULL&#xA;##  $ axis.ticks.r                    : NULL&#xA;##  $ axis.minor.ticks.x.top          : NULL&#xA;##  $ axis.minor.ticks.x.bottom       : NULL&#xA;##  $ axis.minor.ticks.y.left         : NULL&#xA;##  $ axis.minor.ticks.y.right        : NULL&#xA;##  $ axis.minor.ticks.theta          : NULL&#xA;##  $ axis.minor.ticks.r              : NULL&#xA;##  $ axis.ticks.length               : &#39;simpleUnit&#39; num 2.75points&#xA;##   ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##  $ axis.ticks.length.x             : NULL&#xA;##  $ axis.ticks.length.x.top         : NULL&#xA;##  $ axis.ticks.length.x.bottom      : NULL&#xA;##  $ axis.ticks.length.y             : NULL&#xA;##  $ axis.ticks.length.y.left        : NULL&#xA;##  $ axis.ticks.length.y.right       : NULL&#xA;##  $ axis.ticks.length.theta         : NULL&#xA;##  $ axis.ticks.length.r             : NULL&#xA;##  $ axis.minor.ticks.length         : &#39;rel&#39; num 0.75&#xA;##  $ axis.minor.ticks.length.x       : NULL&#xA;##  $ axis.minor.ticks.length.x.top   : NULL&#xA;##  $ axis.minor.ticks.length.x.bottom: NULL&#xA;##  $ axis.minor.ticks.length.y       : NULL&#xA;##  $ axis.minor.ticks.length.y.left  : NULL&#xA;##  $ axis.minor.ticks.length.y.right : NULL&#xA;##  $ axis.minor.ticks.length.theta   : NULL&#xA;##  $ axis.minor.ticks.length.r       : NULL&#xA;##  $ axis.line                       : list()&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_blank&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ axis.line.x                     : NULL&#xA;##  $ axis.line.x.top                 : NULL&#xA;##  $ axis.line.x.bottom              : NULL&#xA;##  $ axis.line.y                     : NULL&#xA;##  $ axis.line.y.left                : NULL&#xA;##  $ axis.line.y.right               : NULL&#xA;##  $ axis.line.theta                 : NULL&#xA;##  $ axis.line.r                     : NULL&#xA;##  $ legend.background               : list()&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_blank&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ legend.margin                   : &#39;margin&#39; num [1:4] 5.5points 5.5points 5.5points 5.5points&#xA;##   ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##  $ legend.spacing                  : &#39;simpleUnit&#39; num 11points&#xA;##   ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##  $ legend.spacing.x                : NULL&#xA;##  $ legend.spacing.y                : NULL&#xA;##  $ legend.key                      : list()&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_blank&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ legend.key.size                 : &#39;simpleUnit&#39; num 1.2lines&#xA;##   ..- attr(*, &amp;quot;unit&amp;quot;)= int 3&#xA;##  $ legend.key.height               : NULL&#xA;##  $ legend.key.width                : NULL&#xA;##  $ legend.key.spacing              : &#39;simpleUnit&#39; num 5.5points&#xA;##   ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##  $ legend.key.spacing.x            : NULL&#xA;##  $ legend.key.spacing.y            : NULL&#xA;##  $ legend.frame                    : NULL&#xA;##  $ legend.ticks                    : NULL&#xA;##  $ legend.ticks.length             : &#39;rel&#39; num 0.2&#xA;##  $ legend.axis.line                : NULL&#xA;##  $ legend.text                     :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : &#39;rel&#39; num 0.8&#xA;##   ..$ hjust        : NULL&#xA;##   ..$ vjust        : NULL&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : NULL&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ legend.text.position            : NULL&#xA;##  $ legend.title                    :List of 11&#xA;##   ..$ family       : NULL&#xA;##   ..$ face         : NULL&#xA;##   ..$ colour       : NULL&#xA;##   ..$ size         : NULL&#xA;##   ..$ hjust        : num 0&#xA;##   ..$ vjust        : NULL&#xA;##   ..$ angle        : NULL&#xA;##   ..$ lineheight   : NULL&#xA;##   ..$ margin       : NULL&#xA;##   ..$ debug        : NULL&#xA;##   ..$ inherit.blank: logi TRUE&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_text&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ legend.title.position           : NULL&#xA;##  $ legend.position                 : chr &amp;quot;right&amp;quot;&#xA;##  $ legend.position.inside          : NULL&#xA;##  $ legend.direction                : NULL&#xA;##  $ legend.byrow                    : NULL&#xA;##  $ legend.justification            : chr &amp;quot;center&amp;quot;&#xA;##  $ legend.justification.top        : NULL&#xA;##  $ legend.justification.bottom     : NULL&#xA;##  $ legend.justification.left       : NULL&#xA;##  $ legend.justification.right      : NULL&#xA;##  $ legend.justification.inside     : NULL&#xA;##  $ legend.location                 : NULL&#xA;##  $ legend.box                      : NULL&#xA;##  $ legend.box.just                 : NULL&#xA;##  $ legend.box.margin               : &#39;margin&#39; num [1:4] 0cm 0cm 0cm 0cm&#xA;##   ..- attr(*, &amp;quot;unit&amp;quot;)= int 1&#xA;##  $ legend.box.background           : list()&#xA;##   ..- attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;element_blank&amp;quot; &amp;quot;element&amp;quot;&#xA;##  $ legend.box.spacing              : &#39;simpleUnit&#39; num 11points&#xA;##   ..- attr(*, &amp;quot;unit&amp;quot;)= int 8&#xA;##   [list output truncated]&#xA;##  - attr(*, &amp;quot;class&amp;quot;)= chr [1:2] &amp;quot;theme&amp;quot; &amp;quot;gg&amp;quot;&#xA;##  - attr(*, &amp;quot;complete&amp;quot;)= logi TRUE&#xA;##  - attr(*, &amp;quot;validate&amp;quot;)= logi TRUE&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Visualizing FEC contributions by state in 2020, 2024, over time. &#xA;# dataset: campaign_spending&#xA;# TODO&#xA;&#xA;# Estimate state-level regression of vote share on campaign spending. &#xA;d_campaign_spending &amp;lt;- d_state_popvote |&amp;gt; &#xA;  mutate(state_abb = state.abb[match(d_state_popvote$state, state.name)]) |&amp;gt; &#xA;  left_join(campaign_spending |&amp;gt; filter(party == &amp;quot;Democrat&amp;quot;), by = c(&amp;quot;year&amp;quot; = &amp;quot;election_year&amp;quot;, &amp;quot;state_abb&amp;quot; = &amp;quot;contribution_state&amp;quot;)) |&amp;gt; &#xA;  filter(year &amp;gt;= 2008)&#xA;&#xA;lm(D_pv ~ contribution_receipt_amount, &#xA;   data = d_campaign_spending) |&amp;gt; summary()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Call:&#xA;## lm(formula = D_pv ~ contribution_receipt_amount, data = d_campaign_spending)&#xA;## &#xA;## Residuals:&#xA;##      Min       1Q   Median       3Q      Max &#xA;## -23.7221  -6.8956  -0.4706   7.1403  25.6166 &#xA;## &#xA;## Coefficients:&#xA;##                              Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;## (Intercept)                 4.526e+01  7.549e-01   59.95  &amp;lt; 2e-16 ***&#xA;## contribution_receipt_amount 1.683e-07  2.710e-08    6.21 3.06e-09 ***&#xA;## ---&#xA;## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1&#xA;## &#xA;## Residual standard error: 9.407 on 198 degrees of freedom&#xA;##   (4 observations deleted due to missingness)&#xA;## Multiple R-squared:  0.163,&#x9;Adjusted R-squared:  0.1588 &#xA;## F-statistic: 38.56 on 1 and 198 DF,  p-value: 3.065e-09&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lm(D_pv2p ~ contribution_receipt_amount, &#xA;   data = d_campaign_spending) |&amp;gt; summary()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Call:&#xA;## lm(formula = D_pv2p ~ contribution_receipt_amount, data = d_campaign_spending)&#xA;## &#xA;## Residuals:&#xA;##      Min       1Q   Median       3Q      Max &#xA;## -22.6125  -7.4113  -0.5198   7.3228  25.5823 &#xA;## &#xA;## Coefficients:&#xA;##                              Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;## (Intercept)                 4.681e+01  7.713e-01  60.688  &amp;lt; 2e-16 ***&#xA;## contribution_receipt_amount 1.749e-07  2.769e-08   6.316 1.74e-09 ***&#xA;## ---&#xA;## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1&#xA;## &#xA;## Residual standard error: 9.611 on 198 degrees of freedom&#xA;##   (4 observations deleted due to missingness)&#xA;## Multiple R-squared:  0.1677,&#x9;Adjusted R-squared:  0.1635 &#xA;## F-statistic: 39.89 on 1 and 198 DF,  p-value: 1.738e-09&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lm(D_pv ~ contribution_receipt_amount + factor(state), &#xA;   data = d_campaign_spending) |&amp;gt; summary()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Call:&#xA;## lm(formula = D_pv ~ contribution_receipt_amount + factor(state), &#xA;##     data = d_campaign_spending)&#xA;## &#xA;## Residuals:&#xA;##     Min      1Q  Median      3Q     Max &#xA;## -8.3469 -1.9696  0.0773  1.9113  9.0506 &#xA;## &#xA;## Coefficients:&#xA;##                               Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;## (Intercept)                  3.686e+01  1.825e+00  20.192  &amp;lt; 2e-16 ***&#xA;## contribution_receipt_amount  5.327e-08  2.959e-08   1.800 0.073869 .  &#xA;## factor(state)Alaska          2.576e+00  2.579e+00   0.999 0.319483    &#xA;## factor(state)Arizona         8.750e+00  2.584e+00   3.386 0.000906 ***&#xA;## factor(state)Arkansas       -9.433e-01  2.579e+00  -0.366 0.715032    &#xA;## factor(state)California      1.730e+01  4.808e+00   3.599 0.000435 ***&#xA;## factor(state)Colorado        1.440e+01  2.605e+00   5.529 1.41e-07 ***&#xA;## factor(state)Connecticut     2.057e+01  2.597e+00   7.920 5.06e-13 ***&#xA;## factor(state)Delaware        2.117e+01  2.579e+00   8.210 9.68e-14 ***&#xA;## factor(state)Florida         1.063e+01  2.718e+00   3.910 0.000140 ***&#xA;## factor(state)Georgia         9.431e+00  2.592e+00   3.639 0.000377 ***&#xA;## factor(state)Hawaii          2.942e+01  2.579e+00  11.409  &amp;lt; 2e-16 ***&#xA;## factor(state)Idaho          -4.617e+00  2.579e+00  -1.790 0.075453 .  &#xA;## factor(state)Illinois        1.968e+01  2.716e+00   7.245 2.16e-11 ***&#xA;## factor(state)Indiana         6.020e+00  2.580e+00   2.334 0.020956 *  &#xA;## factor(state)Iowa            1.105e+01  2.579e+00   4.286 3.26e-05 ***&#xA;## factor(state)Kansas          2.334e+00  2.579e+00   0.905 0.366864    &#xA;## factor(state)Kentucky       -7.378e-02  2.579e+00  -0.029 0.977215    &#xA;## factor(state)Louisiana       2.689e+00  2.579e+00   1.043 0.298745    &#xA;## factor(state)Maine           1.597e+01  2.579e+00   6.191 5.51e-09 ***&#xA;## factor(state)Maryland        2.422e+01  2.660e+00   9.106 5.22e-16 ***&#xA;## factor(state)Massachusetts   2.282e+01  2.735e+00   8.346 4.44e-14 ***&#xA;## factor(state)Michigan        1.493e+01  2.591e+00   5.763 4.59e-08 ***&#xA;## factor(state)Minnesota       1.401e+01  2.587e+00   5.417 2.38e-07 ***&#xA;## factor(state)Mississippi     5.078e+00  2.579e+00   1.969 0.050829 .  &#xA;## factor(state)Missouri        6.110e+00  2.581e+00   2.367 0.019197 *  &#xA;## factor(state)Montana         4.429e+00  2.579e+00   1.717 0.088045 .  &#xA;## factor(state)Nebraska        1.191e+00  2.579e+00   0.462 0.644870    &#xA;## factor(state)Nevada          1.430e+01  2.579e+00   5.546 1.29e-07 ***&#xA;## factor(state)New Hampshire   1.436e+01  2.579e+00   5.570 1.16e-07 ***&#xA;## factor(state)New Jersey      1.918e+01  2.628e+00   7.300 1.60e-11 ***&#xA;## factor(state)New Mexico      1.593e+01  2.581e+00   6.171 6.10e-09 ***&#xA;## factor(state)New York        1.806e+01  3.514e+00   5.140 8.51e-07 ***&#xA;## factor(state)North Carolina  1.068e+01  2.595e+00   4.114 6.41e-05 ***&#xA;## factor(state)North Dakota   -1.301e+00  2.580e+00  -0.504 0.614762    &#xA;## factor(state)Ohio            1.029e+01  2.590e+00   3.974 0.000110 ***&#xA;## factor(state)Oklahoma       -4.809e+00  2.579e+00  -1.865 0.064167 .  &#xA;## factor(state)Oregon          1.696e+01  2.589e+00   6.550 8.76e-10 ***&#xA;## factor(state)Pennsylvania    1.309e+01  2.638e+00   4.963 1.87e-06 ***&#xA;## factor(state)Rhode Island    2.287e+01  2.579e+00   8.869 2.11e-15 ***&#xA;## factor(state)South Carolina  6.209e+00  2.579e+00   2.407 0.017291 *  &#xA;## factor(state)South Dakota    1.100e+00  2.580e+00   0.427 0.670308    &#xA;## factor(state)Tennessee       1.094e+00  2.581e+00   0.424 0.672177    &#xA;## factor(state)Texas           5.065e+00  2.732e+00   1.854 0.065716 .  &#xA;## factor(state)Utah           -5.934e+00  2.579e+00  -2.301 0.022785 *  &#xA;## factor(state)Vermont         2.678e+01  2.579e+00  10.385  &amp;lt; 2e-16 ***&#xA;## factor(state)Virginia        1.382e+01  2.648e+00   5.218 5.96e-07 ***&#xA;## factor(state)Washington      1.787e+01  2.665e+00   6.705 3.90e-10 ***&#xA;## factor(state)West Virginia  -3.341e+00  2.579e+00  -1.295 0.197237    &#xA;## factor(state)Wisconsin       1.404e+01  2.581e+00   5.439 2.14e-07 ***&#xA;## factor(state)Wyoming        -9.864e+00  2.579e+00  -3.824 0.000192 ***&#xA;## ---&#xA;## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1&#xA;## &#xA;## Residual standard error: 3.647 on 149 degrees of freedom&#xA;##   (4 observations deleted due to missingness)&#xA;## Multiple R-squared:  0.9053,&#x9;Adjusted R-squared:  0.8736 &#xA;## F-statistic:  28.5 on 50 and 149 DF,  p-value: &amp;lt; 2.2e-16&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lm(D_pv2p ~ contribution_receipt_amount + factor(state), &#xA;   data = d_campaign_spending) |&amp;gt; summary()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Call:&#xA;## lm(formula = D_pv2p ~ contribution_receipt_amount + factor(state), &#xA;##     data = d_campaign_spending)&#xA;## &#xA;## Residuals:&#xA;##     Min      1Q  Median      3Q     Max &#xA;## -9.0523 -1.6260 -0.0763  1.5152  8.8999 &#xA;## &#xA;## Coefficients:&#xA;##                               Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;## (Intercept)                  3.758e+01  1.517e+00  24.776  &amp;lt; 2e-16 ***&#xA;## contribution_receipt_amount  2.460e-08  2.459e-08   1.000  0.31876    &#xA;## factor(state)Alaska          4.377e+00  2.143e+00   2.042  0.04291 *  &#xA;## factor(state)Arizona         9.548e+00  2.147e+00   4.447 1.69e-05 ***&#xA;## factor(state)Arkansas       -3.483e-01  2.143e+00  -0.163  0.87112    &#xA;## factor(state)California      2.277e+01  3.996e+00   5.699 6.25e-08 ***&#xA;## factor(state)Colorado        1.627e+01  2.165e+00   7.514 4.91e-12 ***&#xA;## factor(state)Connecticut     2.145e+01  2.158e+00   9.940  &amp;lt; 2e-16 ***&#xA;## factor(state)Delaware        2.178e+01  2.143e+00  10.165  &amp;lt; 2e-16 ***&#xA;## factor(state)Florida         1.152e+01  2.259e+00   5.100 1.02e-06 ***&#xA;## factor(state)Georgia         9.852e+00  2.154e+00   4.574 9.99e-06 ***&#xA;## factor(state)Hawaii          3.164e+01  2.143e+00  14.764  &amp;lt; 2e-16 ***&#xA;## factor(state)Idaho          -3.527e+00  2.143e+00  -1.646  0.10196    &#xA;## factor(state)Illinois        2.139e+01  2.257e+00   9.474  &amp;lt; 2e-16 ***&#xA;## factor(state)Indiana         6.542e+00  2.144e+00   3.052  0.00269 ** &#xA;## factor(state)Iowa            1.198e+01  2.143e+00   5.590 1.05e-07 ***&#xA;## factor(state)Kansas          3.028e+00  2.143e+00   1.413  0.15980    &#xA;## factor(state)Kentucky        1.783e-01  2.143e+00   0.083  0.93382    &#xA;## factor(state)Louisiana       2.885e+00  2.143e+00   1.346  0.18029    &#xA;## factor(state)Maine           1.808e+01  2.143e+00   8.437 2.63e-14 ***&#xA;## factor(state)Maryland        2.613e+01  2.210e+00  11.823  &amp;lt; 2e-16 ***&#xA;## factor(state)Massachusetts   2.578e+01  2.273e+00  11.344  &amp;lt; 2e-16 ***&#xA;## factor(state)Michigan        1.576e+01  2.153e+00   7.319 1.44e-11 ***&#xA;## factor(state)Minnesota       1.559e+01  2.150e+00   7.251 2.09e-11 ***&#xA;## factor(state)Mississippi     4.912e+00  2.144e+00   2.292  0.02333 *  &#xA;## factor(state)Missouri        6.636e+00  2.145e+00   3.094  0.00236 ** &#xA;## factor(state)Montana         5.454e+00  2.143e+00   2.545  0.01196 *  &#xA;## factor(state)Nebraska        1.865e+00  2.143e+00   0.870  0.38553    &#xA;## factor(state)Nevada          1.540e+01  2.143e+00   7.185 2.99e-11 ***&#xA;## factor(state)New Hampshire   1.524e+01  2.143e+00   7.112 4.45e-11 ***&#xA;## factor(state)New Jersey      1.997e+01  2.184e+00   9.145 4.15e-16 ***&#xA;## factor(state)New Mexico      1.805e+01  2.145e+00   8.415 2.97e-14 ***&#xA;## factor(state)New York        2.460e+01  2.920e+00   8.424 2.82e-14 ***&#xA;## factor(state)North Carolina  1.124e+01  2.157e+00   5.214 6.08e-07 ***&#xA;## factor(state)North Dakota   -4.783e-01  2.144e+00  -0.223  0.82378    &#xA;## factor(state)Ohio            1.102e+01  2.153e+00   5.119 9.34e-07 ***&#xA;## factor(state)Oklahoma       -4.819e+00  2.143e+00  -2.248  0.02602 *  &#xA;## factor(state)Oregon          1.944e+01  2.152e+00   9.038 7.82e-16 ***&#xA;## factor(state)Pennsylvania    1.393e+01  2.193e+00   6.352 2.43e-09 ***&#xA;## factor(state)Rhode Island    2.414e+01  2.143e+00  11.263  &amp;lt; 2e-16 ***&#xA;## factor(state)South Carolina  6.514e+00  2.143e+00   3.039  0.00280 ** &#xA;## factor(state)South Dakota    1.673e+00  2.144e+00   0.780  0.43652    &#xA;## factor(state)Tennessee       1.412e+00  2.144e+00   0.659  0.51116    &#xA;## factor(state)Texas           6.227e+00  2.270e+00   2.743  0.00684 ** &#xA;## factor(state)Utah           -3.206e+00  2.143e+00  -1.496  0.13682    &#xA;## factor(state)Vermont         3.000e+01  2.143e+00  13.999  &amp;lt; 2e-16 ***&#xA;## factor(state)Virginia        1.513e+01  2.201e+00   6.875 1.59e-10 ***&#xA;## factor(state)Washington      2.056e+01  2.214e+00   9.286  &amp;lt; 2e-16 ***&#xA;## factor(state)West Virginia  -3.187e+00  2.143e+00  -1.487  0.13917    &#xA;## factor(state)Wisconsin       1.487e+01  2.145e+00   6.935 1.15e-10 ***&#xA;## factor(state)Wyoming        -9.082e+00  2.144e+00  -4.237 3.96e-05 ***&#xA;## ---&#xA;## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1&#xA;## &#xA;## Residual standard error: 3.031 on 149 degrees of freedom&#xA;##   (4 observations deleted due to missingness)&#xA;## Multiple R-squared:  0.9377,&#x9;Adjusted R-squared:  0.9168 &#xA;## F-statistic: 44.87 on 50 and 149 DF,  p-value: &amp;lt; 2.2e-16&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# Log transformation of spending. &#xA;lm(D_pv ~ log(contribution_receipt_amount), &#xA;   data = d_campaign_spending) |&amp;gt; summary()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Call:&#xA;## lm(formula = D_pv ~ log(contribution_receipt_amount), data = d_campaign_spending)&#xA;## &#xA;## Residuals:&#xA;##      Min       1Q   Median       3Q      Max &#xA;## -18.1179  -5.0070  -0.8942   4.8189  26.1115 &#xA;## &#xA;## Coefficients:&#xA;##                                  Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;## (Intercept)                      -23.9749     6.9378  -3.456 0.000672 ***&#xA;## log(contribution_receipt_amount)   4.6105     0.4461  10.335  &amp;lt; 2e-16 ***&#xA;## ---&#xA;## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1&#xA;## &#xA;## Residual standard error: 8.287 on 198 degrees of freedom&#xA;##   (4 observations deleted due to missingness)&#xA;## Multiple R-squared:  0.3504,&#x9;Adjusted R-squared:  0.3471 &#xA;## F-statistic: 106.8 on 1 and 198 DF,  p-value: &amp;lt; 2.2e-16&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lm(D_pv2p ~ log(contribution_receipt_amount), &#xA;   data = d_campaign_spending) |&amp;gt; summary()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Call:&#xA;## lm(formula = D_pv2p ~ log(contribution_receipt_amount), data = d_campaign_spending)&#xA;## &#xA;## Residuals:&#xA;##      Min       1Q   Median       3Q      Max &#xA;## -19.0840  -5.6038  -0.7345   5.3017  26.0647 &#xA;## &#xA;## Coefficients:&#xA;##                                  Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;## (Intercept)                      -23.0931     7.1601  -3.225  0.00147 ** &#xA;## log(contribution_receipt_amount)   4.6593     0.4604  10.120  &amp;lt; 2e-16 ***&#xA;## ---&#xA;## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1&#xA;## &#xA;## Residual standard error: 8.552 on 198 degrees of freedom&#xA;##   (4 observations deleted due to missingness)&#xA;## Multiple R-squared:  0.3409,&#x9;Adjusted R-squared:  0.3376 &#xA;## F-statistic: 102.4 on 1 and 198 DF,  p-value: &amp;lt; 2.2e-16&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lm(D_pv ~ log(contribution_receipt_amount) + factor(state), &#xA;   data = d_campaign_spending) |&amp;gt; summary()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Call:&#xA;## lm(formula = D_pv ~ log(contribution_receipt_amount) + factor(state), &#xA;##     data = d_campaign_spending)&#xA;## &#xA;## Residuals:&#xA;##     Min      1Q  Median      3Q     Max &#xA;## -8.4074 -2.1273  0.1057  1.8874  9.7412 &#xA;## &#xA;## Coefficients:&#xA;##                                  Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;## (Intercept)                        0.8159    12.0533   0.068 0.946120    &#xA;## log(contribution_receipt_amount)   2.4420     0.8043   3.036 0.002829 ** &#xA;## factor(state)Alaska                4.2876     2.5973   1.651 0.100887    &#xA;## factor(state)Arizona               6.4501     2.6698   2.416 0.016906 *  &#xA;## factor(state)Arkansas             -0.5393     2.5335  -0.213 0.831723    &#xA;## factor(state)California           15.1284     4.0185   3.765 0.000239 ***&#xA;## factor(state)Colorado             11.0099     2.8619   3.847 0.000177 ***&#xA;## factor(state)Connecticut          17.4151     2.8083   6.201 5.24e-09 ***&#xA;## factor(state)Delaware             21.9221     2.5422   8.623 8.90e-15 ***&#xA;## factor(state)Florida               6.2710     3.1906   1.965 0.051221 .  &#xA;## factor(state)Georgia               6.4667     2.7703   2.334 0.020917 *  &#xA;## factor(state)Hawaii               29.4045     2.5297  11.624  &amp;lt; 2e-16 ***&#xA;## factor(state)Idaho                -2.8521     2.6010  -1.097 0.274615    &#xA;## factor(state)Illinois             15.3483     3.1832   4.822 3.48e-06 ***&#xA;## factor(state)Indiana               4.7607     2.5704   1.852 0.065992 .  &#xA;## factor(state)Iowa                 10.7887     2.5314   4.262 3.58e-05 ***&#xA;## factor(state)Kansas                2.8087     2.5350   1.108 0.269670    &#xA;## factor(state)Kentucky             -0.3147     2.5311  -0.124 0.901214    &#xA;## factor(state)Louisiana             2.5954     2.5299   1.026 0.306602    &#xA;## factor(state)Maine                15.7602     2.5307   6.228 4.59e-09 ***&#xA;## factor(state)Maryland             20.0725     3.0764   6.525 1.00e-09 ***&#xA;## factor(state)Massachusetts        18.4482     3.2128   5.742 5.08e-08 ***&#xA;## factor(state)Michigan             12.0270     2.7598   4.358 2.43e-05 ***&#xA;## factor(state)Minnesota            11.4768     2.7045   4.244 3.85e-05 ***&#xA;## factor(state)Mississippi           7.4131     2.6531   2.794 0.005889 ** &#xA;## factor(state)Missouri              4.3124     2.6128   1.650 0.100952    &#xA;## factor(state)Montana               6.0958     2.5937   2.350 0.020074 *  &#xA;## factor(state)Nebraska              2.8531     2.5935   1.100 0.273073    &#xA;## factor(state)Nevada               13.6415     2.5408   5.369 2.98e-07 ***&#xA;## factor(state)New Hampshire        13.9050     2.5350   5.485 1.73e-07 ***&#xA;## factor(state)New Jersey           15.3878     2.9667   5.187 6.87e-07 ***&#xA;## factor(state)New Mexico           14.3679     2.5935   5.540 1.34e-07 ***&#xA;## factor(state)New York             14.1120     3.7107   3.803 0.000208 ***&#xA;## factor(state)North Carolina        7.5762     2.7966   2.709 0.007538 ** &#xA;## factor(state)North Dakota          3.7015     3.0426   1.217 0.225690    &#xA;## factor(state)Ohio                  7.4367     2.7531   2.701 0.007709 ** &#xA;## factor(state)Oklahoma             -4.8534     2.5297  -1.919 0.056949 .  &#xA;## factor(state)Oregon               14.2587     2.7295   5.224 5.81e-07 ***&#xA;## factor(state)Pennsylvania          9.1872     3.0027   3.060 0.002629 ** &#xA;## factor(state)Rhode Island         23.2334     2.5327   9.173 3.50e-16 ***&#xA;## factor(state)South Carolina        5.6123     2.5387   2.211 0.028580 *  &#xA;## factor(state)South Dakota          4.9169     2.8423   1.730 0.085717 .  &#xA;## factor(state)Tennessee            -0.5135     2.5963  -0.198 0.843484    &#xA;## factor(state)Texas                 0.6800     3.2117   0.212 0.832600    &#xA;## factor(state)Utah                 -5.7113     2.5308  -2.257 0.025480 *  &#xA;## factor(state)Vermont              26.6028     2.5304  10.513  &amp;lt; 2e-16 ***&#xA;## factor(state)Virginia              9.7776     3.0415   3.215 0.001601 ** &#xA;## factor(state)Washington           13.8421     3.0609   4.522 1.24e-05 ***&#xA;## factor(state)West Virginia        -1.1641     2.6375  -0.441 0.659588    &#xA;## factor(state)Wisconsin            12.3482     2.6035   4.743 4.89e-06 ***&#xA;## factor(state)Wyoming              -7.1046     2.6995  -2.632 0.009387 ** &#xA;## ---&#xA;## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1&#xA;## &#xA;## Residual standard error: 3.577 on 149 degrees of freedom&#xA;##   (4 observations deleted due to missingness)&#xA;## Multiple R-squared:  0.9089,&#x9;Adjusted R-squared:  0.8783 &#xA;## F-statistic: 29.73 on 50 and 149 DF,  p-value: &amp;lt; 2.2e-16&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;lm(D_pv2p ~ log(contribution_receipt_amount) + factor(state), &#xA;   data = d_campaign_spending) |&amp;gt; summary() # Why might this be? &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## &#xA;## Call:&#xA;## lm(formula = D_pv2p ~ log(contribution_receipt_amount) + factor(state), &#xA;##     data = d_campaign_spending)&#xA;## &#xA;## Residuals:&#xA;##     Min      1Q  Median      3Q     Max &#xA;## -8.8201 -1.5871 -0.0709  1.4137  8.7889 &#xA;## &#xA;## Coefficients:&#xA;##                                  Estimate Std. Error t value Pr(&amp;gt;|t|)    &#xA;## (Intercept)                      21.48288   10.15760   2.115 0.036098 *  &#xA;## log(contribution_receipt_amount)  1.09101    0.67780   1.610 0.109595    &#xA;## factor(state)Alaska               5.14020    2.18882   2.348 0.020168 *  &#xA;## factor(state)Arizona              8.52501    2.24992   3.789 0.000219 ***&#xA;## factor(state)Arkansas            -0.16807    2.13505  -0.079 0.937363    &#xA;## factor(state)California          21.90979    3.38651   6.470 1.33e-09 ***&#xA;## factor(state)Colorado            14.76283    2.41176   6.121 7.84e-09 ***&#xA;## factor(state)Connecticut         20.05052    2.36666   8.472 2.14e-14 ***&#xA;## factor(state)Delaware            22.11824    2.14239  10.324  &amp;lt; 2e-16 ***&#xA;## factor(state)Florida              9.59767    2.68880   3.570 0.000482 ***&#xA;## factor(state)Georgia              8.53439    2.33463   3.656 0.000355 ***&#xA;## factor(state)Hawaii              31.63148    2.13180  14.838  &amp;lt; 2e-16 ***&#xA;## factor(state)Idaho               -2.73951    2.19191  -1.250 0.213322    &#xA;## factor(state)Illinois            19.47483    2.68255   7.260 1.99e-11 ***&#xA;## factor(state)Indiana              5.98174    2.16617   2.761 0.006479 ** &#xA;## factor(state)Iowa                11.86190    2.13325   5.560 1.21e-07 ***&#xA;## factor(state)Kansas               3.23932    2.13632   1.516 0.131561    &#xA;## factor(state)Kentucky             0.07087    2.13300   0.033 0.973538    &#xA;## factor(state)Louisiana            2.84318    2.13198   1.334 0.184374    &#xA;## factor(state)Maine               17.98910    2.13267   8.435 2.65e-14 ***&#xA;## factor(state)Maryland            24.29554    2.59255   9.371  &amp;lt; 2e-16 ***&#xA;## factor(state)Massachusetts       23.84887    2.70750   8.808 3.01e-15 ***&#xA;## factor(state)Michigan            14.46828    2.32579   6.221 4.75e-09 ***&#xA;## factor(state)Minnesota           14.46096    2.27914   6.345 2.53e-09 ***&#xA;## factor(state)Mississippi          5.95377    2.23588   2.663 0.008600 ** &#xA;## factor(state)Missouri             5.83582    2.20190   2.650 0.008909 ** &#xA;## factor(state)Montana              6.19785    2.18581   2.835 0.005212 ** &#xA;## factor(state)Nebraska             2.60674    2.18565   1.193 0.234897    &#xA;## factor(state)Nevada              15.10382    2.14117   7.054 6.08e-11 ***&#xA;## factor(state)New Hampshire       15.03743    2.13628   7.039 6.59e-11 ***&#xA;## factor(state)New Jersey          18.28879    2.50011   7.315 1.47e-11 ***&#xA;## factor(state)New Mexico          17.35467    2.18561   7.940 4.51e-13 ***&#xA;## factor(state)New York            22.89934    3.12709   7.323 1.41e-11 ***&#xA;## factor(state)North Carolina       9.86668    2.35676   4.187 4.83e-05 ***&#xA;## factor(state)North Dakota         1.75481    2.56405   0.684 0.494794    &#xA;## factor(state)Ohio                 9.75033    2.32009   4.203 4.53e-05 ***&#xA;## factor(state)Oklahoma            -4.83824    2.13184  -2.270 0.024672 *  &#xA;## factor(state)Oregon              18.24442    2.30023   7.932 4.74e-13 ***&#xA;## factor(state)Pennsylvania        12.19744    2.53049   4.820 3.50e-06 ***&#xA;## factor(state)Rhode Island        24.29843    2.13438  11.384  &amp;lt; 2e-16 ***&#xA;## factor(state)South Carolina       6.24806    2.13941   2.920 0.004039 ** &#xA;## factor(state)South Dakota         3.37583    2.39525   1.409 0.160805    &#xA;## factor(state)Tennessee            0.69663    2.18796   0.318 0.750635    &#xA;## factor(state)Texas                4.29190    2.70659   1.586 0.114922    &#xA;## factor(state)Utah                -3.10638    2.13275  -1.457 0.147355    &#xA;## factor(state)Vermont             29.92059    2.13246  14.031  &amp;lt; 2e-16 ***&#xA;## factor(state)Virginia            13.34024    2.56316   5.205 6.34e-07 ***&#xA;## factor(state)Washington          18.78371    2.57947   7.282 1.76e-11 ***&#xA;## factor(state)West Virginia       -2.21587    2.22273  -0.997 0.320421    &#xA;## factor(state)Wisconsin           14.12055    2.19403   6.436 1.58e-09 ***&#xA;## factor(state)Wyoming             -7.85053    2.27494  -3.451 0.000727 ***&#xA;## ---&#xA;## Signif. codes:  0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1&#xA;## &#xA;## Residual standard error: 3.015 on 149 degrees of freedom&#xA;##   (4 observations deleted due to missingness)&#xA;## Multiple R-squared:  0.9384,&#x9;Adjusted R-squared:  0.9177 &#xA;## F-statistic: 45.37 on 50 and 149 DF,  p-value: &amp;lt; 2.2e-16&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;####--------------------------------------------------------------#&#xA;#### Bayesianism.&#xA;####--------------------------------------------------------------#&#xA;&#xA;# Process state-level polling data.&#xA;d_pollav_state &amp;lt;- d_state_polls |&amp;gt;&#xA;  group_by(year, state, party) |&amp;gt;&#xA;  mutate(mean_pollav = mean(poll_support, na.rm = TRUE)) |&amp;gt;&#xA;  top_n(1, poll_date) |&amp;gt;&#xA;  rename(latest_pollav = poll_support) |&amp;gt;&#xA;  select(-c(weeks_left, days_left, poll_date, candidate, before_convention)) |&amp;gt;&#xA;  pivot_wider(names_from = party, values_from = c(latest_pollav, mean_pollav))&#xA;&#xA;# Merge data.&#xA;d &amp;lt;- d_pollav_state |&amp;gt;&#xA;  left_join(d_state_popvote, by = c(&amp;quot;year&amp;quot;, &amp;quot;state&amp;quot;)) |&amp;gt;&#xA;  left_join(d_popvote |&amp;gt; filter(party == &amp;quot;democrat&amp;quot;), by = &amp;quot;year&amp;quot;) |&amp;gt;&#xA;  left_join(d_turnout, by = c(&amp;quot;year&amp;quot;, &amp;quot;state&amp;quot;)) |&amp;gt;&#xA;  filter(year &amp;gt;= 1980) |&amp;gt;&#xA;  ungroup()&#xA;&#xA;# Sequester states for which we have polling data for 2024.&#xA;states.2024 &amp;lt;- unique(d$state[d$year == 2024])&#xA;states.2024 &amp;lt;- states.2024[-which(states.2024 == &amp;quot;Nebraska Cd 2&amp;quot;)]&#xA;d &amp;lt;- d |&amp;gt;&#xA;  filter(state %in% states.2024)&#xA;&#xA;# Separate into training and testing for simple poll prediction model. &#xA;d.train &amp;lt;- d |&amp;gt; filter(year &amp;lt; 2024) |&amp;gt; select(year, state, D_pv2p, latest_pollav_DEM, mean_pollav_DEM, &#xA;                                              D_pv2p_lag1, D_pv2p_lag2) |&amp;gt; drop_na()&#xA;d.test &amp;lt;- d |&amp;gt; filter(year == 2024) |&amp;gt; select(year, state, D_pv2p, latest_pollav_DEM, mean_pollav_DEM, &#xA;                                              D_pv2p_lag1, D_pv2p_lag2)&#xA;&#xA;# Add back in lagged vote share for 2024. &#xA;t &amp;lt;- d |&amp;gt; &#xA;  filter(year &amp;gt;= 2016) |&amp;gt; &#xA;  arrange(year) |&amp;gt; &#xA;  group_by(state) |&amp;gt; &#xA;  mutate(&#xA;    D_pv2p_lag1 = lag(D_pv2p, 1),&#xA;    R_pv2p_lag1 = lag(R_pv2p, 1), &#xA;    D_pv2p_lag2 = lag(D_pv2p, 2),&#xA;    R_pv2p_lag2 = lag(R_pv2p, 2)) |&amp;gt; &#xA;  filter(year == 2024) |&amp;gt; &#xA;  select(state, year, D_pv2p, R_pv2p, D_pv2p_lag1, R_pv2p_lag1, D_pv2p_lag2, R_pv2p_lag2) &#xA;&#xA;# Subset testing data to only relevant variables for our simple model. &#xA;d.test &amp;lt;- d.test |&amp;gt; &#xA;  select(-c(D_pv2p, D_pv2p_lag1, D_pv2p_lag2)) |&amp;gt; &#xA;  left_join(t, by = c(&amp;quot;state&amp;quot;, &amp;quot;year&amp;quot;))&#xA;&#xA;# Standard frequentist linear regression. &#xA;reg.ols &amp;lt;- lm(D_pv2p ~ latest_pollav_DEM + mean_pollav_DEM + D_pv2p_lag1 + D_pv2p_lag2, &#xA;              data = d.train)&#xA;summary(reg.ols)&#xA;pred.ols.dem &amp;lt;- predict(reg.ols, newdata = d.test)&#xA;&#xA;# Create dataset to summarize winners and EC vote distributions. &#xA;win_pred &amp;lt;- data.frame(state = d.test$state,&#xA;                       year = rep(2024, length(d.test$state)),&#xA;                       simp_pred_dem = pred.ols.dem,&#xA;                       simp_pred_rep = 100 - pred.ols.dem) |&amp;gt; &#xA;            mutate(winner = ifelse(simp_pred_dem &amp;gt; simp_pred_rep, &amp;quot;Democrat&amp;quot;, &amp;quot;Republican&amp;quot;)) |&amp;gt;&#xA;            left_join(d_ec, by = c(&amp;quot;state&amp;quot;, &amp;quot;year&amp;quot;))&#xA;&#xA;win_pred&#xA;&#xA;win_pred |&amp;gt; &#xA;  filter(winner == &amp;quot;Democrat&amp;quot;) |&amp;gt; &#xA;  select(state)&#xA;&#xA;win_pred |&amp;gt; &#xA;  filter(winner == &amp;quot;Republican&amp;quot;) |&amp;gt; &#xA;  select(state)&#xA;&#xA;win_pred |&amp;gt; &#xA;  group_by(winner) |&amp;gt; &#xA;  summarize(n = n(), ec = sum(electors))&#xA;&#xA;# Bayesian linear regression using STAN. &#xA;stan.data &amp;lt;- list(N = nrow(d.train), &#xA;                  D_pv2p = d.train$D_pv2p, &#xA;                  latest_pollav_DEM = d.train$latest_pollav_DEM, &#xA;                  mean_pollav_DEM = d.train$mean_pollav_DEM, &#xA;                  D_pv2p_lag1 = d.train$D_pv2p_lag1, &#xA;                  D_pv2p_lag2 = d.train$D_pv2p_lag2)&#xA;&#xA;stan.code &amp;lt;- &amp;quot;&#xA;data {&#xA;  int&amp;lt;lower=0&amp;gt; N;&#xA;  vector[N] D_pv2p;&#xA;  vector[N] latest_pollav_DEM;&#xA;  vector[N] mean_pollav_DEM;&#xA;  vector[N] D_pv2p_lag1;&#xA;  vector[N] D_pv2p_lag2;&#xA;} &amp;quot;&#xA;&#xA;stan.code &amp;lt;- paste(stan.code, &amp;quot;&#xA;parameters {&#xA;  real alpha;&#xA;  real beta1;&#xA;  real beta2;&#xA;  real beta3;&#xA;  real beta4;&#xA;  real&amp;lt;lower=0&amp;gt; sigma;&#xA;} &amp;quot;)&#xA;&#xA;stan.code &amp;lt;- paste(stan.code, &amp;quot;&#xA;model {&#xA;  D_pv2p ~ normal(alpha + beta1*latest_pollav_DEM + beta2*mean_pollav_DEM + beta3*D_pv2p_lag1 + beta4*D_pv2p_lag2, sigma);&#xA;} &amp;quot;)&#xA;&#xA;stan.model &amp;lt;- stan_model(model_code = stan.code)&#xA;&#xA;#changed to 400 instead of 4000&#xA;stan.fit &amp;lt;- sampling(stan.model, data = stan.data, chains = 4, iter = 1000, warmup = 500)&#xA;&#xA;# Compare coefficients from frequentist and Bayesian linear regressions. &#xA;coef(reg.ols)&#xA;confint(reg.ols)&#xA;print(stan.fit, pars = c(&amp;quot;alpha&amp;quot;, &amp;quot;beta1&amp;quot;, &amp;quot;beta2&amp;quot;, &amp;quot;beta3&amp;quot;, &amp;quot;beta4&amp;quot;, &amp;quot;sigma&amp;quot;))&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Blog Post 5</title>
      <link>https://example.org/post/2024/10/07/blog-post-v/</link>
      <pubDate>Mon, 07 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/10/07/blog-post-v/</guid>
      <description>&lt;p&gt;In this week&amp;rsquo;s blog post I will explore how demographics provide insight into the electorate and election outcomes.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Replicating Kim &amp;amp; Zilinsky (2022)&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Confusion Matrix and Statistics&#xA;## &#xA;##             Reference&#xA;## Prediction   Democrat Republican&#xA;##   Democrat        746        336&#xA;##   Republican      346        660&#xA;##                                           &#xA;##                Accuracy : 0.6734          &#xA;##                  95% CI : (0.6528, 0.6935)&#xA;##     No Information Rate : 0.523           &#xA;##     P-Value [Acc &amp;gt; NIR] : &amp;lt;2e-16          &#xA;##                                           &#xA;##                   Kappa : 0.3456          &#xA;##                                           &#xA;##  Mcnemar&#39;s Test P-Value : 0.7304          &#xA;##                                           &#xA;##             Sensitivity : 0.6832          &#xA;##             Specificity : 0.6627          &#xA;##          Pos Pred Value : 0.6895          &#xA;##          Neg Pred Value : 0.6561          &#xA;##              Prevalence : 0.5230          &#xA;##          Detection Rate : 0.3573          &#xA;##    Detection Prevalence : 0.5182          &#xA;##       Balanced Accuracy : 0.6729          &#xA;##                                           &#xA;##        &#39;Positive&#39; Class : Democrat        &#xA;## &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Kim &amp;amp; Zilinsky (2022) co-authored a paper where they concluded that demographic information (five key attributes) about a voter can accurately predict a voter&amp;rsquo;s choice with an accuracy of 63.9%.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blog Post 4</title>
      <link>https://example.org/post/2024/10/01/blog-post-4/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/10/01/blog-post-4/</guid>
      <description>&lt;h4 id=&#34;this-weeks-question-does-the-incumbency-advantage-apply-to-harris-andor-trump-explain-why-or-why-not&#34;&gt;This Week&amp;rsquo;s Question: Does the incumbency advantage apply to Harris and/or Trump? Explain why or why not.&lt;/h4&gt;&#xA;&lt;p&gt;To begin answering this question I will start with an analysis of pork spending. Pork is federal spending via programs and funding that is provided to people in certain geographic areas and districts. Incumbents generally have an advantage when competing for re-election. Among those advantages is the ability to leverage pork to persuade voters and maintain their base&amp;rsquo;s support.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blog Post 3</title>
      <link>https://example.org/post/2024/09/23/blog-post-3/</link>
      <pubDate>Mon, 23 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/09/23/blog-post-3/</guid>
      <description>&lt;p&gt;This Week&amp;rsquo;s Objective: Compare and contrast Silver (2024) and Morris (2024). Which approach is better?&lt;/p&gt;&#xA;&lt;p&gt;Nate Silver makes some updates to the 2024 presidential election forecast model. One of the biggest changes to the model from the 2020 presidential election is the removal of COVID-19 effects and its impact on other variables in the model such as the convention bounce–boost in the polls for presidential candidates after the convention. In 2020, the conventions were held virtually and likely drew less excitement for the candidates.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blog Post II</title>
      <link>https://example.org/post/2024/09/16/blog-post-ii/</link>
      <pubDate>Mon, 16 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/09/16/blog-post-ii/</guid>
      <description>&lt;p&gt;Date: September, 16, 2024&lt;/p&gt;&#xA;&lt;p&gt;This Week&amp;rsquo;s Question: Can we predict election outcomes using only the state of the economy? If so, how well?&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Loading required package: carData&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;## ✔ dplyr     1.1.3     ✔ readr     2.1.4&#xA;## ✔ forcats   1.0.0     ✔ stringr   1.5.0&#xA;## ✔ ggplot2   3.4.3     ✔ tibble    3.2.1&#xA;## ✔ lubridate 1.9.2     ✔ tidyr     1.3.0&#xA;## ✔ purrr     1.0.2     &#xA;## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;## ✖ dplyr::filter() masks stats::filter()&#xA;## ✖ dplyr::lag()    masks stats::lag()&#xA;## ✖ dplyr::recode() masks car::recode()&#xA;## ✖ purrr::some()   masks car::some()&#xA;## ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;####&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-#&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blog Post 1</title>
      <link>https://example.org/post/2024/09/12/testpost/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://example.org/post/2024/09/12/testpost/</guid>
      <description>&lt;p&gt;Welcome to my election blog! Every week I will be updating my election model and providing analysis to forecast the outcome of the 2024 presidential election as part of an assignment for GOV 1347.&lt;/p&gt;&#xA;&lt;p&gt;The following template is created by Matthew Dardet. In the following weeks I will be building off this election model from our lab section.&lt;/p&gt;&#xA;&lt;p&gt;This week I aim to answer the following questions:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;How competitive are presidential elections in the United States?&lt;/li&gt;&#xA;&lt;li&gt;Which states vote blue/red and how consistently?&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;pre&gt;&lt;code&gt;## ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──&#xA;## ✔ dplyr     1.1.3     ✔ readr     2.1.4&#xA;## ✔ forcats   1.0.0     ✔ stringr   1.5.0&#xA;## ✔ lubridate 1.9.2     ✔ tibble    3.2.1&#xA;## ✔ purrr     1.0.2     ✔ tidyr     1.3.0&#xA;## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──&#xA;## ✖ dplyr::filter() masks stats::filter()&#xA;## ✖ dplyr::lag()    masks stats::lag()&#xA;## ✖ purrr::map()    masks maps::map()&#xA;## ℹ Use the conflicted package (&amp;lt;http://conflicted.r-lib.org/&amp;gt;) to force all conflicts to become errors&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Warning: package &#39;usdata&#39; was built under R version 4.3.3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## Rows: 38 Columns: 9&#xA;## ── Column specification ────────────────────────────────────────────────────────&#xA;## Delimiter: &amp;quot;,&amp;quot;&#xA;## chr (2): party, candidate&#xA;## dbl (3): year, pv, pv2p&#xA;## lgl (4): winner, incumbent, incumbent_party, prev_admin&#xA;## &#xA;## ℹ Use `spec()` to retrieve the full column specification for this data.&#xA;## ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;year&amp;quot;            &amp;quot;party&amp;quot;           &amp;quot;winner&amp;quot;          &amp;quot;candidate&amp;quot;      &#xA;## [5] &amp;quot;pv&amp;quot;              &amp;quot;pv2p&amp;quot;            &amp;quot;incumbent&amp;quot;       &amp;quot;incumbent_party&amp;quot;&#xA;## [9] &amp;quot;prev_admin&amp;quot;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 3&#xA;##   party      candidate         pv2p&#xA;##   &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;            &amp;lt;dbl&amp;gt;&#xA;## 1 democrat   Biden, Joseph R.  52.3&#xA;## 2 republican Trump, Donald J.  47.7&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## # A tibble: 19 × 3&#xA;##     year democrat republican&#xA;##    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt;&#xA;##  1  1948     52.3       47.7&#xA;##  2  1952     44.7       55.3&#xA;##  3  1956     42.2       57.8&#xA;##  4  1960     50.1       49.9&#xA;##  5  1964     61.3       38.7&#xA;##  6  1968     49.6       50.4&#xA;##  7  1972     38.2       61.8&#xA;##  8  1976     51.1       48.9&#xA;##  9  1980     44.8       55.2&#xA;## 10  1984     40.9       59.1&#xA;## 11  1988     46.2       53.8&#xA;## 12  1992     53.6       46.4&#xA;## 13  1996     54.8       45.2&#xA;## 14  2000     50.3       49.7&#xA;## 15  2004     48.7       51.3&#xA;## 16  2008     53.8       46.2&#xA;## 17  2012     51.9       48.1&#xA;## 18  2016     51.2       48.8&#xA;## 19  2020     52.3       47.7&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## # A tibble: 19 × 4&#xA;##     year democrat republican winner&#xA;##    &amp;lt;dbl&amp;gt;    &amp;lt;dbl&amp;gt;      &amp;lt;dbl&amp;gt; &amp;lt;chr&amp;gt; &#xA;##  1  1948     52.3       47.7 D     &#xA;##  2  1952     44.7       55.3 R     &#xA;##  3  1956     42.2       57.8 R     &#xA;##  4  1960     50.1       49.9 D     &#xA;##  5  1964     61.3       38.7 D     &#xA;##  6  1968     49.6       50.4 R     &#xA;##  7  1972     38.2       61.8 R     &#xA;##  8  1976     51.1       48.9 D     &#xA;##  9  1980     44.8       55.2 R     &#xA;## 10  1984     40.9       59.1 R     &#xA;## 11  1988     46.2       53.8 R     &#xA;## 12  1992     53.6       46.4 D     &#xA;## 13  1996     54.8       45.2 D     &#xA;## 14  2000     50.3       49.7 D     &#xA;## 15  2004     48.7       51.3 R     &#xA;## 16  2008     53.8       46.2 D     &#xA;## 17  2012     51.9       48.1 D     &#xA;## 18  2016     51.2       48.8 D     &#xA;## 19  2020     52.3       47.7 D&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code&gt;## # A tibble: 2 × 2&#xA;##   winner races&#xA;##   &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt;&#xA;## 1 D         11&#xA;## 2 R          8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;####----------------------------------------------------------#&#xA;#### Visualize trends in national presidential popular vote. &#xA;####----------------------------------------------------------#&#xA;&#xA;# Visualize the two-party presidential popular over time. &#xA;&#xA;d_popvote |&amp;gt; &#xA;  ggplot(aes(x = year, y = pv2p, color = party)) + &#xA;  geom_line() + &#xA;  scale_color_manual(values = c(&amp;quot;dodgerblue4&amp;quot;, &amp;quot;firebrick1&amp;quot;)) +&#xA;  labs(title = &amp;quot;two-party presidential popular over time&amp;quot;,&#xA;        x = &amp;quot;year&amp;quot;,&#xA;        y = &amp;quot;2p vote prop.&amp;quot;) +&#xA;  theme_bw()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;img src=&#34;https://example.org/post/2024/09/12/testpost/index_files/figure-html/2 party vote share trend-1.png&#34; width=&#34;672&#34; /&gt;&#xA;&lt;p&gt;This graph can help us understand how competitive U.S. presidential elections are because it demonstrates the proportion of popular vote Democrats and Republican presidential candidates have obtained. It is important to note that elections are not won by popular vote but it is not  unreasonable to presume that the elected presidents do not tend to win the popular vote. A document posted by the Alabama Secretary of State (&lt;a href=&#34;https://www.sos.alabama.gov/sites/default/files/election-data/Electoral%20College%20FAQ.pdf&#34;&gt;https://www.sos.alabama.gov/sites/default/files/election-data/Electoral%20College%20FAQ.pdf&lt;/a&gt;) notes that only four times throughout American history has a president won the election without the popular vote. The 2016 presidential election is one of those outliers as displayed by the graph. Hilary Clinton obtained won the popular vote and lost the electoral college thus costing her the presidency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About Hugo XMin</title>
      <link>https://example.org/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.org/about/</guid>
      <description>&lt;p&gt;&lt;strong&gt;XMin&lt;/strong&gt; is the first Hugo theme I have designed. The original reason that I wrote it was I needed a minimal example of Hugo themes when I was writing the  &lt;a href=&#34;https://github.com/rstudio/blogdown&#34;&gt;&lt;strong&gt;blogdown&lt;/strong&gt;&lt;/a&gt; book. Basically I wanted a simple theme that supports a navigation menu, a home page, other single pages, lists of pages, blog posts, categories, tags, and RSS. That is all. Nothing fancy. In terms of CSS and JavaScript, I really want to keep them minimal. In fact, this theme does not contain any JavaScript code at all, although on this example website I did introduce some JavaScript code (still relatively simple anyway). The theme does not contain any images, either, and is pretty much a plain-text theme.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
